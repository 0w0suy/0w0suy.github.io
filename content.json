{"meta":{"title":"Suy's Blog","subtitle":"Everything will be ok","description":" ","author":"0w0suy","url":"https://0w0suy.github.io","root":"/"},"pages":[{"title":"gallery","date":"2021-07-20T23:53:35.000Z","updated":"2021-07-21T00:07:40.867Z","comments":true,"path":"gallery/index.html","permalink":"https://0w0suy.github.io/gallery/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-07-20T16:03:52.000Z","updated":"2021-07-20T16:04:17.427Z","comments":true,"path":"categories/index.html","permalink":"https://0w0suy.github.io/categories/index.html","excerpt":"","text":""},{"title":"link","date":"2021-07-20T16:04:47.000Z","updated":"2021-07-20T16:05:08.967Z","comments":true,"path":"link/index.html","permalink":"https://0w0suy.github.io/link/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-07-20T16:02:41.000Z","updated":"2021-07-20T16:03:07.306Z","comments":true,"path":"tags/index.html","permalink":"https://0w0suy.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Python之函数","slug":"Python之函数","date":"2021-07-21T13:02:14.000Z","updated":"2021-07-21T05:03:52.838Z","comments":true,"path":"2021/07/21/Python之函数/","link":"","permalink":"https://0w0suy.github.io/2021/07/21/Python%E4%B9%8B%E5%87%BD%E6%95%B0/","excerpt":"","text":"","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://0w0suy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://0w0suy.github.io/tags/Python/"}]},{"title":"Mysql服务器的基本配置及访问办法","slug":"Mysql服务器的基本配置及访问办法","date":"2021-07-19T11:56:20.000Z","updated":"2021-07-21T03:39:15.886Z","comments":true,"path":"2021/07/19/Mysql服务器的基本配置及访问办法/","link":"","permalink":"https://0w0suy.github.io/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/","excerpt":"","text":"预备知识存在即合理，从两个问题开始引入mysql 1、“这是什么？” 2、“为什么要有这个？” 什么是数据库？数据库，是用来存储数据的。数据库由表组成，表由列组成。这个表就像Excel一样，它适合存放一些文字信息。比如，id、密码、电话号码、地址等等，但是它不适合存放单个大体量的文件对象，比如，电影、照片。 简单的举个栗子，比如说QQ中的数据库，会存放users的网名、密码、QQ号、个性签名等数据，但是qq空间的动态里的视频、音乐、图片可能就不会放在数据库里。 MySQL是什么？MySQL是一种数据库软件。数据库和MySQL的关系，就像是聊天软件与QQ、微信的关系。世界上有各种各样的数据库，比如Oracle、MySQL、SQL Server等等，一般互联网公司都会用MySQL，因为它是免费、使用范围最广。 MySQL已经成为当前网络中使用最多的数据库之一，特别是在Web应用上，它占据了中小型应用的绝对优势。这一切都源于它的小巧易用、安全有效、开放式许可和多平台，更主要的是它与三大Web语言之一——PHP的完美结合。 SQL是什么？SQL是一种编程语言，就像Java、C++、Python。它是用来操纵数据库的一种语言。只需要上百个英文单词，SQL就能对数据进行让人眼花缭乱的操作。 为什么要有数据库？数据库可以让很多人同时地进行访问、更改数据。而excel不能供一个大型系统使用，它的性能不够好。（想象一下数亿人同时操控一个Excel文件，啊，那真是不能想象，一定卡顿爆） 总的来说，数据库是一种数据存储系统，其中最具代表性的是mysql，我们使用sql语言对它进行操纵。 实验环境用户系统：Windows操作系统 工具：MySQL5.5软件 数据库安全实验1、安装MySQL 在MySQL官网上点download，进入MySQL Community server下载想要下载的版本，直接下载installer，不要下载zip压缩包（我下载的是5.5.29，截止到2021.07.19，最新版本是8.0.25，越稳定越好，随便下个5.5.29的） 几个非默认的页面需要注意一下（并非一直点next） 2、MySQL密码为安装时所设，键入后回车，界面如下。 3、运行下图命令，查看User表。 1use mysql 4、运行update命令，将MySQL数据库root用户的口令改成123456。其中最后一句命令flush privileges的意思是强制刷新内存授权表，否则用的还是缓冲中的口令，这时非法用户还可以用root用户及空口令登录，直到重启MySQL服务器。 12update user set password = password(&#x27;123456&#x27;) where user=&#x27;root&#x27;;flush privileges; 5、运行delete命令，删除空用户。Host字段为localhost的匿名用户拥有所有的权限，就是说本地用户用空的用户名和空的口令登录MySQL数据库服务器可以得到最高的权限，所以匿名用户必须删除。 12delete from user where user=&#x27;&#x27;;flush privileges; 6、Desc User User表是授权表中最重要的一个，运行下图命令，列出可以连接服务器的用户及其加密口令，并且它指定它们有哪种全局（超级用户）权限。在User表启用的任何权限均是全局权限，并适用于所有数据库。所以我们不能给任何用户访问MySQL. User表的权限。 1desc user; 7、Desc DB 运行下图命令，查看DB表，列出所有数据库，而用户有权限访问它们。在这里指定的权限适用于一个数据库中的所有表。 12use mysql;desc db; 8、Desc Host Host表如下图所示，与DB表结合使用在一个较好层次上控制特定主机对数据库的访问权限，这可能比单独使用DB好些。这个表不受GRANT和REVOKE语句的影响。 1desc host; 9、设置用户权限 如下图命令用于在本地增加一个具有所有权限的test 用户(超级用户)，密码是test。ON子句中的*.*意味着“所有数据库、所有表”。with grant option表示它具有grant权限。用grant语句创建权限是不需要再手工刷新授权表的，因为它已经自动刷新了。 12grant all privileges on *.* to test@localhost identified by &#x27;test&#x27; with grant option;select User,Password from user; 查看运行结果，如下图。 10、删除用户的权限，并删除用户 123revoke all on *.* from test@localhost;delete from user where user=&#x27;test&#x27;;flush privileges; 删除用户权限。 删除用户test。 到这就OK啦","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://0w0suy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://0w0suy.github.io/tags/MySQL/"}]},{"title":"hexo根目录中_config.yml配置解释","slug":"hexo根目录中-config-yml配置解释","date":"2021-07-17T08:35:10.000Z","updated":"2021-07-21T03:39:15.894Z","comments":true,"path":"2021/07/17/hexo根目录中-config-yml配置解释/","link":"","permalink":"https://0w0suy.github.io/2021/07/17/hexo%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%AD-config-yml%E9%85%8D%E7%BD%AE%E8%A7%A3%E9%87%8A/","excerpt":"","text":"前言在学习发博客的时候，经常会出现报错，而这些报错通常会让我们修改根目录中_config.yml某些配置，然而我也是不知所以然就”照本宣改”,甚至会想当然的改掉了原来一些配置，导致hexo d运行报错。因此，通过这篇blog对config的配置进行解释说明。 配置123`#Hexo Configuration``##Docs: https://hexo.io/docs/configuration.html``##Source: https://github.com/hexojs/hexo/` 第二、三行表示hexo文档的相关文档，Docs指的是hexo的文档，Source指的是hexo的Github源码。 网站Site1234567#sitetitle: Hexosubtitle: &#x27;&#x27;description: &#x27;&#x27;author: John Doelanguage: entimezone: &#x27;&#x27; title: 网站的名字，会写在hexo g命令生成后的public文件夹下的index.html文件的title标签里。 我们也可以在默认的主题的首页左下角找到 subtitle：网站的副标题，生成的时候默认为空，我们可以试着给他赋个值看它会出现在哪。 在这个默认的主题里，它写在背景图中间，也就是hexo的正下方。 author：顾名思义就是作者，这个也只是署个名而已language：这里就写了网站使用的语言，en表示英文timezone：网站对应的时区，一般情况下不用去刻意配置，会默认使用电脑的时区，但如果发布到其他地方的服务器，可能会使用当地服务器的时区，此时如果有需要用到本电脑的时区就要手动设置时区了，一般中国的时区可以设置为Asia/Shanghai 网址URL123456## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;##如果你的网站位于子目录中，请将网址url设置为&#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;url: https://0w0suy.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults: url：网站的网址root：网站的根目录permalink：文章的永久链接格式 比如我的这篇blog，它的链接格式就是year/:month/:day/:title/ 并且在D:\\blog\\blog\\public\\2021\\07这里面，也是按照日期进行归类的 permalink_defaults：为permalink中各项的默认值 目录Directory12345678source_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render: source_dir：存放hexo文章的文件夹，我们写的md文件都放在这个配置对应的文件夹下，默认值是sourcepublic_dir：存放hexo g生成的文件，执行hexo g后根目录就会出现这个文件夹，默认值是publictag_dir：按标签存放文章的目录，默认值是tags，如果我们给文章添加标签，使用hexo g时public文件夹下就会多出一个tags文件夹（根据我们的配置文件夹名不同）比如到目前为止（2021.7.17)我的tag分为四类 archive_dir：归档文件夹，存放归档文件，默认值为archivescategory_dir：分类文件夹，按分类存放的文件，和上面的tags一样，只要在文章中的Font-matter添加了categories就会在使用hexo g构造时出现相应的文件夹，在D:\\blog\\blog\\public\\categories中 code_dir：Include code 文件夹，source_dir 下的子目录，默认值为downloads/codei18n_dir：国际化（i18n）文件夹，默认值:langskip_render：跳过指定文件的渲染，匹配到的文件将会被不做改动复制到public文件夹下，如果路径对应的是我们的文章，那会直接忽略掉该文章，我们这样设置来忽略掉hello-world.md文件 文章Writing1234567891011121314151617new_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: enable: true # Open external links in new tab field: site # Apply to the whole site exclude: &#x27;&#x27;filename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: new_post_name：新文章的默认名称，我们是使用hexo new来构造文章的，生成的文章名就是通过这里配置的，也就是标题.md，生成的md文件可以在D:\\blog\\blog\\source_posts中找到default_layout：预设布局，hexo new可以创建三种文件，post/帖子，draft/草稿，page/页面，这里设置默认值在使用hexo new就可以直接创建对应默认类型的文章，设置了post就等同于说在命令行执行hexo new 和执行hexo new post 是一样的，也可以设置为draft和page。所以我们在hexo new 的时候是默认生成post文件，而非draft和pagetitlecase：把标题转换为 titlecase，但因为为FALSE，所以不转化external_link enable：是否在新标签中打开链接，为TRUE fileds：external_link.enable的配置对当前网站（site）生效或仅对文章（post）生效，默认为site exclude：需要排除的域名 filename_case：把文件名称转换为小写(1)或者大写(2)，默认不转换(0) render_drafts：是否渲染草稿文件，默认为false不渲染post_asset_folder：是否启动资源文件夹，对于我们的网站，如果我们的文章里面有图片，我们可以在source文件夹下建立一个统一的images文件夹来存放图片，但是如果有的文章有很多的资源文件如图片，我们可以通过设置该配置为true，这样在source文件夹下创建文件的同时也会创建一个同名文件夹来存放相应的资源，比如我设置为true，然后执行hexo new “hexo根目录中_config.yml配置解释”，对应的，在D:\\blog\\blog\\source_posts中会生成一个匹配的文件夹，专门存放图片 relative_link：是否把链接改为与根目录的相对地址，默认为falsefuture：是否显示当前时间之后的文章，默认为true，如果设置为false的话，我们设置的日期如果是未来的日期的话，就不会显示highlight：代码块的设置 enable：开启代码高亮，默认为true auto_detect：如果未指定语言，就自动检测，默认为false line_number：显示代码的行数，默认为true tab_replace：用n个空格来代表tab键，如果值为空，则不会代替tab键 主页设置Home page setting1234567 # path: Root path for your blogs index page. (default = &#x27;&#x27;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &#x27;&#x27; per_page: 10 order_by: -date index_generator：主页相关的设置 path：主页对应的路径，默认为 ‘ ‘，即域名根目录就是主页的路径 per_page：每页显示的帖子数，默认为10 order_by：帖子的排序，默认为-date，即按日期倒序排 分类和标签Category&amp;Tag123default_category: uncategorized category_map:tag_map: default_category: uncategorized 默认分类category_map:分类别名tag_map:标签别名 日期、时间格式Date/Time format12345## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss date_format：日期格式，默认为YYYY-MM-DD，即年月日time_format：时间格式，默认为HH:mm:ss，即时分秒 分页Pagination123## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page per_page：分页时每页的文章数，如果为0则不分页，默认为10pagination_dir分页的目录，默认为page，对应于public文件夹下的archives文件夹下的page文件夹，如果只有一页是不会生成这个文件夹的 主题Extensions123## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape theme: landscape # 当前使用的主题名 部署Deployment12345## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/0w0suy/0w0suy.github.io.git branch: master repo: # 库地址 branch: # 分支名称","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://0w0suy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://0w0suy.github.io/tags/hexo/"}]},{"title":"Python实例1--文本进度条","slug":"Python实例1--文本进度条","date":"2021-07-16T00:15:48.000Z","updated":"2021-07-21T03:39:15.894Z","comments":true,"path":"2021/07/16/Python实例1--文本进度条/","link":"","permalink":"https://0w0suy.github.io/2021/07/16/Python%E5%AE%9E%E4%BE%8B1--%E6%96%87%E6%9C%AC%E8%BF%9B%E5%BA%A6%E6%9D%A1/","excerpt":"","text":"文本进度条的分析1、采用字符串方式打印可以动态变化的文本进度条 2、进度条需要能在一行中逐渐变化 3、采用sleep（）模拟一个持续的进度 文本进度条框架12345678910import timescale = 10print(&quot;-----开始阅读------&quot;)for i in range(scale+1): a = &#x27;*&#x27;*i b = &#x27;.&#x27;*(scale - i) c = (i/scale)*100 print(&quot;&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&quot;.format(c,a,b)) time.sleep(0.1)print(&quot;------阅读完毕------&quot;) 执行结果如下图 我们可以看到这个文本进度条包括百分比，”开始阅读”及”阅读完毕”的字眼，以及剩余阅读部分的进度条格式。 分析代码1import time 我们先引入一个time库，整体用sleep函数，来生成一个持续不断的时间。 123print(&quot;-----开始阅读------&quot;)print(&quot;------阅读完毕------&quot;) 我们打印了开始阅读和阅读完毕的字眼，为了使看起来更加美观，引入了减号”-“，字体居中。 1scale = 10 scale指的是文本进度条的大概宽度 1for i in range(scale+1): for循环，for i in range 这样的表达方式，表示遍历range（） 对象。之所以称为遍历循环，是因为for语句的循环执行次数是根据遍历结构中元素的个数确定的。遍历循环可以简单的理解为从遍历结构中逐一提取元素，放入循环变量中，对于每个所提取的元素执行一次循环体语句，当遍历结构中所有的元素都被访问遍了，遍历循环就正常结束。 放到进度条中，可以理解为，每经过一个循环，计算机完成一个任务，打印一个进度条，计算机再完成一个任务，再打印一个进度条。直到进度条百分百，即完成了任务，打印出“阅读完毕”。 1a = &#x27;*&#x27;*i 定义a，字符*与循环变量i的乘积 (在字符串中学过，字符串与整数的乘积表示字符串被复制的次数) 因此，a表示星号*被复制的次数，而星号指当前的百分比所表达的信息。 1b = &#x27;.&#x27;*(scale - i) 定义b，用.表示，与当前剩余的进度条的笔记之间的乘积。 1c = (i/scale)*100 c指的是我们输出与当前进度条和进度相关的百分比 1print(&quot;&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&quot;.format(c,a,b)) 前面我们学过，百分比%和括号{}，可以表示占位符。用三个占位符表示三个槽。&#123;:^3.0f&#125;%表示某%，[&#123;&#125;-&gt;&#123;&#125;]前者占位符表示星号*，即已阅读进度条，后者占位符表示点.，即剩余进度条。 1time.sleep(0.1) 表示将程序短暂的停顿1秒 单行动态刷新刷新的本质刷新的本质是用后打印的字符覆盖之前的字符。 比如说，截止到2021年7月16日9点19分，国内疫情实时大数据报告有9007979480人在浏览这个网页，当我刷新一次截止到2021年7月16日9点20分，这个数据变成了9007982317，用后面的数据覆盖了原来数据的位置，之前的数据被替换，对用户来说，这就是刷新效果。 这就需要我们的程序，在输出某一个 字符的字符串的时候，不能够换行到下一行。因为一旦换行到下一行，之前的数据就不能被后来的所覆盖。因为print函数执行完后会进行到下一行，所以我们要让print不能换行。并且要让光标退回到之前的位置，实现覆盖。 总而言之，刷新要做到两点: 1.不能换行 2.要能退回 代码如下： 1234import timefor i in range(101): print(&quot;\\r&#123;:3&#125;%&quot;.format(i),end=&quot;&quot;) time.sleep(0.1) 执行结果如下图 分析代码1import time 还是使用time库的sleep函数 1`for i in range(101):` 构造101次的循环过程。因为为了输入文本进度条，从0%到100 %，划分为101次。 1print(&quot;\\r&#123;:3&#125;%&quot;.format(i),end=&quot;&quot;) 在format后面增加了,end=&quot;&quot;，这是print函数的一个参数，end后字符串为空字符，表示print完不会增加新的内容，光标还是停留在最后一个字符上。\\r&#123;:3&#125;%表示在打印输出字符串之前，将光标退回到当前行的行首。 简单来说，在每次输出前，把光标放到行首，覆盖原来的数据，在输出后也不换行，下一次循环再输出的时候，再把光标放到行首，覆盖上次的数据后，再输出，又不换行。这样就构成了一种单行刷新的效果。 1time.sleep(0.1) 表示将程序短暂的停顿1秒 分析结果我们看到的是从0%到100%的结果，但实际上是一个一个覆盖刷新的效果。因为IDLE本身是一个编写式的开发环境，它并不是程序运行的主要环境。 进度条的改进完善运用知识1、字符串处理 2、数字处理 3、时间库的使用 123456789101112import timescale = 50print(&quot;开始阅读&quot;.center(scale//2,&quot;-&quot;))start = time.perf_counter()for i in range(scale+1): a = &#x27;*&#x27;*1 b = &#x27;.&#x27;*(scale - i) c = (i/scale)*100 dur = time.perf_counter() - start print(&quot;\\r:&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&quot;.format(c,a,b,dur),end=&quot;&quot;) time.sleep(0.1)print(&quot;\\n&quot;+&quot;阅读完毕&quot;.center(scale//2,&quot;-&quot;)) 运行结果如下图 区别： print(&quot;-----开始阅读------&quot;) print(&quot;开始阅读&quot;.center(scale//2,&quot;-&quot;)) 刚开始我们为了让结果看起来更美观，用减号-来分隔，但如果页面布局或大小变化，这样显得不太智能。现在我们使用字符串处理中的.center方法，将一个-字符填充在执行开始或者执行结束的两侧，通过填充的方式，自动实现减号构成的分隔线条。 并且我们还增加了计时效果start = time.perf_counter()，确定了一个开始时间，而 dur = time.perf_counter() - start表示每次循环所消耗的时间。 print(&quot;\\r:&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&quot;.format(c,a,b,dur),end=&quot;&quot;)中的\\n ，表示文本的刷新效果，实现光标向行首移动。end=&quot;&quot;表示每次输出后不换行。 进度条的举一反三计算问题扩展文本进度条程序使用了perf_counter()计时，计时方法适合各类需要统计时间的计算问题。 在上文我们可以看到在每次打印进度条后，会加上一个时间，即相隔循环打印时间。这样我们就可以用perf_counter()来比较不同算法时间、统计部分程序运行时间。 进度条应用扩展不仅可以应用于文本进度条，也可以在大型加载的程序中增加进度条，因为进度条是人机交互的桥梁，通过进度条我们可以直观的看到计算机运行的进度，可以给我们带来对程序更好的理解。","categories":[{"name":"实例","slug":"实例","permalink":"https://0w0suy.github.io/categories/%E5%AE%9E%E4%BE%8B/"}],"tags":[{"name":"python","slug":"python","permalink":"https://0w0suy.github.io/tags/python/"}]},{"title":"markdown的基础语法","slug":"markdown的基础语法","date":"2021-07-14T03:37:28.000Z","updated":"2021-07-21T03:39:15.894Z","comments":true,"path":"2021/07/14/markdown的基础语法/","link":"","permalink":"https://0w0suy.github.io/2021/07/14/markdown%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","excerpt":"","text":"前言写过博客的都知道Markdown语法的重要性，否则就会像我一样，在 hexo d 后出现warn警告。这篇博客将轻松搞定Markdown语法~ 一、快捷键 功能 快捷键 加粗 Ctrl+B 斜体 Ctrl+I 引用 Ctrl+Q 插入链接 Ctrl+L 插入代码 Ctrl+K 插入图片 Ctrl+G 有序列表 Ctrl+O 无序列表 Ctrl+U 横线 Ctrl+R 撤销 Ctrl+Z 保存 Ctrl+S 二、基本语法2.1 字体设置 输入内容 显示效果 文本前后各加一个”*” 0w0suy斜体 文本前后各加一个”_” 0w0suy 斜体 文本前后各加两个”*” 0w0suy加粗 文本前后各加三个”*” 0w0suy斜体加粗 文本前后各加一个”~” 0w0suy下划线 2.2 分级标题 输入内容 显示效果 文本前加一个”#” 一级标题 文本前加两个”#” 二级标题 文本前加三个”#” 三级标题 文本前加四个”#” 四级标题 注意：#后空一格在输入文本 2.3 链接2.3.1 插入本地图片链接![图片描述](图片路径&quot;title&quot;) 2.3.2 插入网络图片只需要在语法的括号中填入图片的网络链接即可例如： 2.4 分割线在一行中输入三个”*”,”-“,”_”都可以建立分割线，行内不能有其他东西，分割线效果如下 2.5 代码块在写博客的时候，插入代码块这个功能是必不可少的，如果不插入代码块，就没办法直观地显示出代码指令，从而直接运行代码插入代码块的方式有两种，一种是利用缩进（tab），另一种是利用英文反引号符号（在英文输入法下，与~同键，按一下即可打出`） 2.5.1代码块缩进4个空格或者按一下tab键，接着输入代码 2.5.2行内式在一个行内需要引用代码的话，只要用反引号就可例如，我的ID是 0w0suy 2.5.3多行代码块与语法高亮在需要高亮的代码块的前一行和后一行使用三个反引号即可,如下图 1print(&quot;hello world&quot;) 2.5.4代码块里面包含html代码在代码区块里面，&amp;、&lt;、&gt;，会自动转化成HTML实体 2.6 引用2.6.1基本使用在被引用的文本前面加上”&gt;”符号，并空格，使用效果如下 0w0suy 这是输入内容： &gt;0w0suy 2.6.2嵌套引用使用效果如下 引用1引用2引用3 这是输入内容：&gt;&gt;&gt;引用1，&gt;&gt; 引用2，&gt; 引用3 2.7 表格以第一大点的快捷键中表格制作为例，表格的基本写法跟表格的形状很相似代码及效果图如下: 12345功能 | 快捷键 |- | - | 加粗 | Ctrl+B斜体 | Ctrl+I引用|Ctrl+Q 功能 快捷键 加粗 Ctrl+B 斜体 Ctrl+I 引用 Ctrl+Q 三、常用技巧3.1 换行方法1：连续按两个以上空格+回车方法2：使用HTML语言换行标签 3.2 缩进字符&amp;nbsp;我爱学习 &nbsp;我爱学习（缩进四分之一中文） &amp;ensp;我爱学习 &ensp;我爱学习 （缩进半个中文，1字符） &amp;emsp;我爱学习 &emsp;我爱学习 （缩进1个中文，2字符） 3.3 特殊符号3.3.1基本符号对于Markdown中的语法符号，前面加反斜线\\即可显示符号本身格式为\\符号\\反斜线*星号_下划线#井号.句点!感叹号 3.3.2特殊符号&amp;#10084; &#10084;&amp;#10003; &#10003;&amp;#9728; &#9728;&amp;#9733; &#9733;&amp;#9730; &#9730;&amp;#9775; &#9775;&amp;#10052; &#10052;&amp;#9835; &#9835;想知道更多的字符对应的unicode码，可以看这个网站：https://unicode-table.com/cn/ 3.4 字体、字号、颜色、背景色Markdown本身不支持修改字体、字号与颜色等功能 3.5 链接的高级操作3.5.1行内式参考上文语法，在一个行内需要引用代码的话，只要用反引号就可例如，我的ID是 0w0suy 3.5.2参考式链接在文档要插入图片的地方写 ![图片或网址链接][标记]，在文档的最后写上[标记]:图片地址”标题” 3.5.3 内容目录在段落中填写[top]以显示全文内容的目录结构 3.5.4 注脚3.6 emoji表情符号四、高端用法4.1 LaTeX数学公式4.2 流程图4.3 TODO列表4.4 绘制序列图五、Markdown工具","categories":[{"name":"使用教程","slug":"使用教程","permalink":"https://0w0suy.github.io/categories/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://0w0suy.github.io/tags/Markdown/"}]},{"title":"github＋hexo懒人搭建博客完整教程","slug":"github＋hexo懒人搭建博客完整教程","date":"2021-07-07T15:51:20.000Z","updated":"2021-07-21T03:39:15.894Z","comments":true,"path":"2021/07/07/github＋hexo懒人搭建博客完整教程/","link":"","permalink":"https://0w0suy.github.io/2021/07/07/github%EF%BC%8Bhexo%E6%87%92%E4%BA%BA%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/","excerpt":"","text":"一、准备1.1环境搭建搭建博客首先是准备环境的搭建，这就像我们体内的细胞依赖于内环境而存活，内环境为细胞的生活提供的必要的水环境以及其它物质交换的通道。我们搭建的环境也是如此。先安装 Node.js 和 Git，因为Hexo 基于 Node.js。附上下载的官网链接Node.js：https://nodejs.org/zh-cnGit：https://git-scm.com/downloads下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。安装完成后，Win+R 输入 cmd 并打开（或者左下角点查找），依次输入 node -v、npm -v 和 git –version（注意空格） 并回车，出校如下图表示成功。 1.2注意事项敲代码的时候，将输入法换成英文输入。统一使用 Git Bash 进行操作。注意空格。 二、连接 Github使用邮箱注册 GitHub 账户，选择免费账户（Free），并完成邮件验证。在桌面的页面，在空白处右键鼠标点【Git Bash Here】开始运行，设置用户名和邮箱。（注意：用户名是自己的github账户名，邮箱是绑定的邮箱）‘’’git config –global user.name “GitHub 用户名”git config –global user.email “GitHub 邮箱”‘’’创建 SSH 密匙输入 ssh-keygen -t rsa -C “GitHub 邮箱”，然后一路回车。添加密匙：进入 [C:\\Users\\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。验证连接：打开 Git Bash，输入 ssh -T &#x67;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#111;&#109; 出现 “Are you sure……”，输入 yes 回车确认。显示 “Hi xxx! You’ve successfully……” 即连接成功。 三、创建 Github Pages 仓库GitHub 主页右上角加号 -&gt; New repository：Repository name 中输入 用户名.github.io勾选 “Initialize this repository with a README”Description 选填填好后点击 Create repository 创建。创建后默认自动启用 HTTPS，博客地址为：https://用户名.github.io 四、本地安装 Hexo 博客程序新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。 4.1. 安装 Hexo使用 npm 一键安装 Hexo 博客程序：npm install -g hexo-cli稍等一会后，会出现如下图的代码 4.2. Hexo 初始化和本地预览初始化并安装所需组件：hexo init # 初始化npm install # 安装组件完成后依次输入下面命令，启动本地服务器进行预览：hexo g # 生成页面hexo s # 启动预览访问 http://localhost:4000，出现 Hexo 默认页面，本地博客安装成功！ 五、部署 Hexo 到 GitHub Pages本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。首先安装 hexo-deployer-git：npm install hexo-deployer-git –save然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：‘’’deploy: type: git repository: &#103;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#99;&#111;&#109;:用户名/用户名.github.io.git branch: master‘’’完成后运行 hexo d 将网站上传部署到 GitHub Pages。完成！这时访问我们的 GitHub 域名 https://用户名.github.io 就可以看到 Hexo 网站了。 六、绑定域名（可选）因为我用的是免费的github域名，就没有绑定域名。域名注册和解析这步过程略。七、开始使用详情见下一篇博客7.1. 发布文章7.2. 网站设置7.3. 更换主题7.4. 常用代码 八、常见问题详情见下一篇博客","categories":[{"name":"使用教程","slug":"使用教程","permalink":"https://0w0suy.github.io/categories/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://0w0suy.github.io/tags/hexo/"}]},{"title":"关于blog常见报错及解决方法","slug":"关于blog常见报错及解决方法","date":"2021-07-07T05:36:34.000Z","updated":"2021-07-21T03:39:15.894Z","comments":true,"path":"2021/07/07/关于blog常见报错及解决方法/","link":"","permalink":"https://0w0suy.github.io/2021/07/07/%E5%85%B3%E4%BA%8Eblog%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","excerpt":"","text":"前言在发blog的时候，经常会遇到一些重复性的报错问题，这些报错感觉都很眼熟，好像每天都会遇到（笑哭）。第一次看不懂报错，直接复制粘贴甩给百度翻译，但是就算翻译成中文人也还是懵逼的。比如这样 又或是这样 或许是那样 等等等等… 第二次第三次又遇到一样的情况，索性就整理出来吧。（持续更新） hexo d报错解决：OpenSSL SSL_read: Connection was reset, errno 10054 错误解决首先，造成这个错误很有可能是网络不稳定，连接超时导致的， 如果再次尝试后依然报错，可以执行下面的命令 在D:\\blog\\blog中打开Git-Bash命令页面，执行git命令脚本：修改设置，解除ssl验证 1git config --global http.sslVerify &quot;false&quot; 此时，再执行hexo d即可解决 hexo s 报错解决(node:15260) Warning 很简单 不用管它 （警告而已warning,我也不知道为什么还能运行qwq)","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://0w0suy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://0w0suy.github.io/tags/hexo/"}]},{"title":"Hello World","slug":"Hello World","date":"2021-07-06T06:09:11.479Z","updated":"2021-07-21T03:39:15.886Z","comments":true,"path":"2021/07/06/Hello World/","link":"","permalink":"https://0w0suy.github.io/2021/07/06/Hello%20World/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://0w0suy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"实例","slug":"实例","permalink":"https://0w0suy.github.io/categories/%E5%AE%9E%E4%BE%8B/"},{"name":"使用教程","slug":"使用教程","permalink":"https://0w0suy.github.io/categories/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://0w0suy.github.io/tags/Python/"},{"name":"MySQL","slug":"MySQL","permalink":"https://0w0suy.github.io/tags/MySQL/"},{"name":"hexo","slug":"hexo","permalink":"https://0w0suy.github.io/tags/hexo/"},{"name":"python","slug":"python","permalink":"https://0w0suy.github.io/tags/python/"},{"name":"Markdown","slug":"Markdown","permalink":"https://0w0suy.github.io/tags/Markdown/"}]}