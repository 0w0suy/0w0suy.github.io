<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Suy&#39;s Blog</title>
  
  <subtitle>Everything will be ok</subtitle>
  <link href="https://0w0suy.github.io/atom.xml" rel="self"/>
  
  <link href="https://0w0suy.github.io/"/>
  <updated>2021-07-23T14:16:34.044Z</updated>
  <id>https://0w0suy.github.io/</id>
  
  <author>
    <name>0w0suy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RSA密码的深入浅出</title>
    <link href="https://0w0suy.github.io/2021/07/23/RSA%E5%AF%86%E7%A0%81%E7%9A%84%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/"/>
    <id>https://0w0suy.github.io/2021/07/23/RSA%E5%AF%86%E7%A0%81%E7%9A%84%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/</id>
    <published>2021-07-23T01:10:13.000Z</published>
    <updated>2021-07-23T14:16:34.044Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看到这样一句话</p><p><strong>“密码本质上就是拉开了时间复杂度的差距。”</strong></p><p>初次看到，茫然不知，我想，密码跟时间复杂度究竟有何联系？何为复杂度？这复杂程度的参照物又是什么？怀揣着疑问，我在知乎、CSDN上阅读几篇大佬对密码学的认识与理解。阅读归阅读，还是得靠吸收与总结，那现在就开始我对密码学cryptography中RSA的深入浅出吧！（密码学的背景发展史等，网上千篇一律，暂不赘述</p><hr><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>先说说开头提到的这句哈把“密码本质上就是拉开了时间复杂度的差距。”我们知道，计算机的计算运行速度很快，四位数乘四位数的计算，人需要一分钟左右，而计算机秒出结果。然而，计算机的计算能力是有限的，就算是超级计算机“天问二号”，<strong>计算速度也有上限</strong></p><p><img src="/2021/07/23/RSA%E5%AF%86%E7%A0%81%E7%9A%84%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/image-20210723093418874.png"></p><p>所以对于计算机来说，我们需要利用时间复杂度来衡量一个程序的算法有多耗时。按照初中学过的知识，我们知道底数大于1的指数呈“爆炸式增长”，也从古代国王在64个格子放米的例子中可以看出，当放到第28格的时候，需要米已经超过1亿，放到第64格的时候，大约要放92亿粒！（有人计算过，大约是2814亿吨重）从这个例子我们就可以看到，时间复杂度直接影响了程序完成的速度。当计算机计算指数函数10的n次方时，可能就需要好几十年</p><p><img src="/2021/07/23/RSA%E5%AF%86%E7%A0%81%E7%9A%84%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/image-20210723094340430.png"></p><p>从而可知，在密码学中，很多时候<strong>密码不是不可以破解的，只不过破解密码需要大量的时间</strong>。</p><p>比如在RSA中最关键的一步，是Alice生成两个指数p和q，计算它们乘积n=p*q，然后告诉Bob这个n的值，他就需要把n质因数分解为p和q，对于这种单项函数来说，逆着运算（即分解质因数)的时间复杂度是指数级，比顺着运算（乘积n）的运算时间来得要长。</p><p>假如Alice的这个p和q足够大，等Bob分解完n，恐怕就过去了好几十年。</p><p><strong>因此，密码的本质上就是拉开了时间复杂度的差距，使得解密密码的时间复杂度高于加密的时间复杂度，以达成保密的目的。</strong></p><hr><h1 id="一些数论"><a href="#一些数论" class="headerlink" title="一些数论"></a>一些数论</h1><p>来，先来膜拜一下伟大的数学家–欧拉</p><p><img src="/2021/07/23/RSA%E5%AF%86%E7%A0%81%E7%9A%84%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/1.png" alt="欧拉"></p><p>被称为“对世界数学的发展作出创造性工作的人士”，他值得！</p><p>下述的一些数论知识在初高中就有学习过，简单提一哈~</p><h2 id="欧拉函数–φ（n）"><a href="#欧拉函数–φ（n）" class="headerlink" title="欧拉函数–φ（n）"></a>欧拉函数–φ（n）</h2><p><strong>φ（n）：在[0,n)中与n互质的正整数的个数</strong></p><p>eg：n=23，在[0,23)中，与21互质的正整数有：1、 2、  4 、5 、8、 10、 11 、13、 16 、17、 19、 20这12个数，因此φ（23）=12</p><p><strong>φ（n）=（p-1）（q-1）</strong></p><p>eg：23=7*3，φ（23）=（7-1）（3-1）=12</p><h2 id="同余式"><a href="#同余式" class="headerlink" title="同余式"></a>同余式</h2><p>我们学过余数，同余式就是另外一种写法罢了，下面以一个表格做出比较</p><table><thead><tr><th>名称</th><th>余式</th><th>同余式</th></tr></thead><tbody><tr><td>eg1</td><td>23÷7=3…2</td><td>23≡2（mod7）</td></tr><tr><td>eg2</td><td>50÷8=6…2</td><td>50≡2（mod8）</td></tr><tr><td>通式</td><td>a÷m=k…b</td><td>a≡b（mod m）</td></tr></tbody></table><p>之前学习同余式可能忽略了几个性质，网上找了一下基本性质，直接放图</p><p><img src="/2021/07/23/RSA%E5%AF%86%E7%A0%81%E7%9A%84%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/Snipaste_2021-07-23_10-28-39.png" alt="Snipaste_2021-07-23_10-28-39"></p><h2 id="欧拉公式"><a href="#欧拉公式" class="headerlink" title="欧拉公式"></a>欧拉公式</h2><p><strong>若a与n互质，则a^φ（n）^≡1（mod n）</strong></p><h2 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h2><p><strong>如果ab ≡ 1（mod m），则称a和b为关于m互为乘法逆元</strong></p><p>已知a求b的方法：因为ab <strong>≡</strong> 1（mod m），所以不妨设ab+mk=1，其中a和m为已知数。可以利用<strong>扩展欧几里得算法</strong>，计算出来一个乘法逆元b。</p><h1 id="RSA简介"><a href="#RSA简介" class="headerlink" title="RSA简介"></a>RSA简介</h1><p>前面铺垫了这么这么多，终于开始进入咱们的正题–RSA的深入浅出</p><p>先对rsa密钥体制做个介绍</p><p>1、选择两个大的互质参数p，q，计算出模数<code>n=p*q</code></p><p>2、计算欧拉函数<code>φ（n）=（p-1)(q-1)</code>。选择一个e（1&lt;e&lt;φ（n)),要求e和φ（n）互质，即<code>gcd(e,φ（n）)=1</code></p><p>3、计算e的模反数d。计算方法为<code>e*d≡1（mod φ（n））</code>【模反元素：如果存在两个正整数e和φ（n）互质，那么一定存在一个整数d，使得ed-1被φ（n）整除，即ed=kφ（n）+1.这是，d就是e的模反元素。欧拉公式可以证明模反元素必然存在。两个整数a，b，它们除以整数φ（n）所得余数相等，即a≡1(modφ（n）)，b≡1（modφ（n）），根据相乘的性质ab≡1（modφ（n）），所以a和b互为逆元</p><p>4、对明文m加密。密文<code>c=pow（m，e，n）</code>，等同于c=m^e^（mod n）</p><p>5、对密文c解密。明文<code>m=pow（c，d，n）</code>，等同于m=c^d^（mod n）</p><h1 id="RSA安全性分析"><a href="#RSA安全性分析" class="headerlink" title="RSA安全性分析"></a>RSA安全性分析</h1><p>值得一提的是，虽然公钥（n，e）是直接公开的，但是只有Alice知道密钥（n，d），可以计算m=c^d^（mod n），<strong>除了Alice，没有任何人可以知道φ(n)，所以没有人可以求出e关于φ(n)的乘法逆元d。也就是说d的值从头到尾只有Alice自己知道，不可能泄露。</strong>假如Alice把本地的私钥弄丢了，那，谁也解不开密码，这就是非对称密码rsa与对称密码的本质区别</p><h1 id="常用的攻击方法"><a href="#常用的攻击方法" class="headerlink" title="常用的攻击方法"></a>常用的攻击方法</h1><h2 id="直接分解模数"><a href="#直接分解模数" class="headerlink" title="直接分解模数"></a>直接分解模数</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>直接分解数模n是最直接的攻击放方法，也是最困难的办法。破解RSA最直接（暴力）的方法就是分解整数n，然后计算欧拉函数φ(n)=(p-1) * (q-1),再通过d * e ≡ 1 mod φ(N)，即可计算出 d，然后就可以使用私钥(N, d)通过m = pow(c,d,N)解密明文。</p><p>如果<code>n</code>小于256bit，可以使用本地工具进行暴力分解，例如windwods平台的<code>RSATool</code>，可以在数分钟之内完成256bit的<code>n</code>的分解。<br>如果<code>n</code>大于768bit，可以尝试利用在线网站<a href="http://factordb.com,/">http://factordb.com，</a> 这一类在线网站的原理是储存了部分<code>n</code>分解成功的的值。</p><h3 id="CTF原题"><a href="#CTF原题" class="headerlink" title="CTF原题"></a>CTF原题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;920139713,19&#125;</span><br><span class="line"></span><br><span class="line">704796792</span><br><span class="line">752211152</span><br><span class="line">274704164</span><br><span class="line">18414022</span><br><span class="line">368270835</span><br><span class="line">483295235</span><br><span class="line">263072905</span><br><span class="line">459788476</span><br><span class="line">483295235</span><br><span class="line">459788476</span><br><span class="line">663551792</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">428313374</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">425392137</span><br><span class="line">704796792</span><br><span class="line">458265677</span><br><span class="line">341524652</span><br><span class="line">483295235</span><br><span class="line">534149509</span><br><span class="line">425392137</span><br><span class="line">428313374</span><br><span class="line">425392137</span><br><span class="line">341524652</span><br><span class="line">458265677</span><br><span class="line">263072905</span><br><span class="line">483295235</span><br><span class="line">828509797</span><br><span class="line">341524652</span><br><span class="line">425392137</span><br><span class="line">475206804</span><br><span class="line">428313374</span><br><span class="line">483295235</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">306220148</span><br></pre></td></tr></table></figure><p>分解n可以通过在线网站<a href="http://www.factordb.com/index.php%E3%80%82">http://www.factordb.com/index.php。</a></p><p><img src="/2021/07/23/RSA%E5%AF%86%E7%A0%81%E7%9A%84%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/Snipaste_2021-07-23_11-42-13.png" alt="Snipaste_2021-07-23_11-42-13"></p><p>p=18443,q=49891,e=19,c=这一大串数字密文</p><p>因此可以通过d * e ≡ 1 mod φ(n)，计算出 d</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">p = gmpy2.mpz(18443)     #初始化大整数</span><br><span class="line">q = gmpy2.mpz(49891)</span><br><span class="line">e = gmpy2.mpz(19)</span><br><span class="line">phi_n = (p-1)*(q-1)</span><br><span class="line">d = gmpy2.invert(e,phi_n)    #invert（e， φ(n)）返回d使得e*d == 1 mod φ(n)，如果不存在d，则返回0</span><br><span class="line">print(&quot;p=%s,q=%s,e=%s&quot;%(p,q,e))</span><br><span class="line">print(&quot;d is:\n%s&quot;%d)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#输出结果为</span><br><span class="line">p=18443,q=49891,e=19 </span><br><span class="line">d is: </span><br><span class="line">96849619</span><br></pre></td></tr></table></figure><p><img src="/2021/07/23/RSA%E5%AF%86%E7%A0%81%E7%9A%84%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/2.png"></p><p>到目前为止，有了d就可以求出明文m</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#求明文</span><br><span class="line">import gmpy2</span><br><span class="line">n = 920139713</span><br><span class="line">d = 96849619</span><br><span class="line">c = &quot;&quot;&quot;</span><br><span class="line">704796792</span><br><span class="line">752211152</span><br><span class="line">274704164</span><br><span class="line">18414022</span><br><span class="line">368270835</span><br><span class="line">483295235</span><br><span class="line">263072905</span><br><span class="line">459788476</span><br><span class="line">483295235</span><br><span class="line">459788476</span><br><span class="line">663551792</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">428313374</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">425392137</span><br><span class="line">704796792</span><br><span class="line">458265677</span><br><span class="line">341524652</span><br><span class="line">483295235</span><br><span class="line">534149509</span><br><span class="line">425392137</span><br><span class="line">428313374</span><br><span class="line">425392137</span><br><span class="line">341524652</span><br><span class="line">458265677</span><br><span class="line">263072905</span><br><span class="line">483295235</span><br><span class="line">828509797</span><br><span class="line">341524652</span><br><span class="line">425392137</span><br><span class="line">475206804</span><br><span class="line">428313374</span><br><span class="line">483295235</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">306220148</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">result = &quot;&quot;</span><br><span class="line">c_list = c.split()</span><br><span class="line">#print(c_list)</span><br><span class="line">for i in c_list:</span><br><span class="line">    result += chr(pow(int(i),d,n))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p><img src="/2021/07/23/RSA%E5%AF%86%E7%A0%81%E7%9A%84%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/3.png" alt="解密结果"></p><h2 id="对rsa的公共模数攻击"><a href="#对rsa的公共模数攻击" class="headerlink" title="对rsa的公共模数攻击"></a>对rsa的公共模数攻击</h2><p>使用相同的模数n，取不同的e1、e2，用不同的私钥d1、d2加密同一份明文消息，得到不同的密文c1、c2</p><h3 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h3><p>假如采用两个或者两个以上的公钥(n，e)来加密同一条信息，可以得到下面的结论：</p><blockquote><p>c1 = pow(m, e1, n)<br>c2 = pow(m, e2, n)</p></blockquote><p>分别拿对应的私钥来加密，可以得到相同的明文m</p><blockquote><p>m = pow(c1, d1, n)<br>m = pow(c2, d2, n)</p></blockquote><p>假设攻击者已知n,e1,e2,c1,c2，即可以得到明文m，因为e1和e2互质，所以使用欧几里得算法（用于计算两个整数a,b的最大公约数）可以找到能够满足以下条件的x，y：</p><blockquote><p>pow(x,e1)+pow(y,e2)=1</p></blockquote><p>假设x为负数，需再使用欧几里得算法来计算</p><blockquote><p>pow(c1,-1)</p></blockquote><p>则可以得到</p><blockquote><p>pow(pow(c1,-1),-x) * pow(c2,y) = p mod(n)</p></blockquote><p>如果p&lt;n，则p可以被计算出来。</p><h2 id="rsa小指数e攻击"><a href="#rsa小指数e攻击" class="headerlink" title="rsa小指数e攻击"></a>rsa小指数e攻击</h2><p>如果RSA系统的公钥e选取较小的值，比如e=3，就容易受到攻击。</p><p>有三个分别使用不同的模数n1,n2,n3，但是都选取e=3，加密同一个明文可以得到：</p><blockquote><p>c1 = pow(m,3,n1)<br>c2 = pow(m,3,n2)<br>c3 = pow(m,3,n3)</p></blockquote><p>一般情况下，n1,n2,n3互素，否则会比较容易求出公因子，从而安全性大幅度的减低。</p><h2 id="ras选择密文攻击"><a href="#ras选择密文攻击" class="headerlink" title="ras选择密文攻击"></a>ras选择密文攻击</h2><p>在此种攻击模型中，攻击者需要掌握的内容包括：加密算法、截获的部分密文、自己选择的密文消息以及相应的被解密的明文。</p><h2 id="利用公约数"><a href="#利用公约数" class="headerlink" title="利用公约数"></a>利用公约数</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h3><p>如果两次加密的<code>n1</code>和<code>n2</code>具有相同的素因子，可以利用<code>欧几里德算法</code>直接分解<code>n1</code>和<code>n2</code>，通过<code>欧几里德算法</code>计算出两个<code>n</code>的最大公约数<code>p</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def gcd(a, b):</span><br><span class="line">if a &lt; b:</span><br><span class="line">    a, b = b, a</span><br><span class="line">while b != 0:</span><br><span class="line">    temp = a % b</span><br><span class="line">     a = b</span><br><span class="line">     b = temp</span><br><span class="line">def gcd_digui(a, b):</span><br><span class="line">if b != 0:</span><br><span class="line">   return a</span><br><span class="line">return gcd(b,a%b)</span><br><span class="line">p = gcd(n1,n2)</span><br></pre></td></tr></table></figure><h3 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h3><p>识别此类题目，通常会发现题目给了若干个n，均不相同，并且都是2048bit，4096bit级别，无法正面硬杠，并且明文都没什么联系，e也一般取65537。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><blockquote><p>n1=9051013965404084482870087864821455535159008696042953021965631089095795348830954383127323853272528967729311045179605407693592665683311660581204886571146327720288455874927281128121117323579691204792399913106627543274457036172455814805715668293705603675386878220947722186914112990452722174363713630297685159669328951520891938403452797650685849523658191947411429068829734053745180460758604283051344339641429819373112365211739216160420494167071996438506850526168389386850499796102003625404245645796271690310748804327<br>n2=13225948396179603816062046418717214792668512413625091569997524364243995991961018894150059207824093837420451375240550310050209398964506318518991620142575926623780411532257230701985821629425722030608722035570690474171259238153947095310303522831971664666067542649034461621725656234869005501293423975184701929729170077280251436216167293058560030089006140224375425679571181787206982712477261432579537981278055755344573767076951793312062480275004564657590263719816033564139497109942073701755011873153205366238585665743</p></blockquote><p>我们用欧几里得算法计算出n1n2的最大公约数p:</p><p><img src="/2021/07/23/RSA%E5%AF%86%E7%A0%81%E7%9A%84%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/4.png" alt="代码"></p><blockquote><p>p=1564859779720039565508870182569324208117555667917997801104862601098933699462849007879184203051278194180664616470669559575370868384820368930104560074538872199213236203822337186927275879139590248731148622362880471439310489228147093224418374555428793546002109</p></blockquote><p>在求出</p><p><img src="/2021/07/23/RSA%E5%AF%86%E7%A0%81%E7%9A%84%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/5.png" alt="计算结果"></p><blockquote><p>q1=5783913729972247946253435353096326443704028481940849421114868598345923360618656121534285508526073359609714402851036717793499213802965059543550823534771936528992718924827788759885479930993068821959532735506613731118802093419664455101954524961474681210142720</p><p>q2=8451842502173444137736814762941916058188287492225312470701776645749560167356046185751987142378046260660654109657367986531032438683223878564614629060680414105738103196373377352503582154146395466843322435064918174001568589071204760456484430101336520922543227</p></blockquote><p>有了p、q、n、e，再用常规的方法求出d</p><blockquote><p>d is:<br>765380157716548443425596742911266886410191216178112356262846713847378783683172254263632491551899451289816619131919308216828436088806741843938280790265785398475478529787399443730855951368875915938248660455496573500895189591415557910142785245074081094025796970799530756594690014890734289131423703767389303315127407756913225666969130239449802975261679436688682166951981930860230211054980705709388431034038355036001994657320535672433358165972446575669374989675751263007447610176671622049636459417182325418702702105</p></blockquote><p>感叹一下，数字真的好大！</p><h2 id="Coppersmith定理攻击"><a href="#Coppersmith定理攻击" class="headerlink" title="Coppersmith定理攻击"></a>Coppersmith定理攻击</h2><p>在一个e阶的mod n多项式f(x)中，如果有一个根小于<code>n^frac&#123;1&#125;&#123;e&#125;</code> ，就可以运用一个O(log n)的算法求出这些根。</p><p>这个定理可以应用于RSA算法。如果e = 3并且在明文当中只有三分之二的bite是已知的，这种算法可以求出明文中所有的bite</p><hr><p>工具之在线分解大素数：<a href="http://factordb.com/">http://factordb.com</a></p><p>CTF-RSA-tool: <a href="https://github.com/D001UM3/CTF-RSA-tool">https://github.com/D001UM3/CTF-RSA-tool</a></p><p>参考文章：<a href="https://blog.csdn.net/huanghelouzi/article/details/82943615">https://blog.csdn.net/huanghelouzi/article/details/82943615</a></p><p>安装gmpy2：<a href="https://blog.51cto.com/u_12332766/2116615">https://blog.51cto.com/u_12332766/2116615</a></p><p>sagemath:<a href="http://www.sagemath.org/">http://www.sagemath.org/</a>  (我还没装，暂时没用上)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨天看到这样一句话&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“密码本质上就是拉开了时间复杂度的差距。”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;初次看到，茫然不知，我想，密码跟时间复杂度究竟有何联系？何为复杂度？这复杂程度的参照物又是什么？怀揣着疑问，我在知乎、CSDN上阅读几篇大佬对密码学</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://0w0suy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="密码学" scheme="https://0w0suy.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Python之函数</title>
    <link href="https://0w0suy.github.io/2021/07/21/Python%E4%B9%8B%E5%87%BD%E6%95%B0/"/>
    <id>https://0w0suy.github.io/2021/07/21/Python%E4%B9%8B%E5%87%BD%E6%95%B0/</id>
    <published>2021-07-21T13:02:14.000Z</published>
    <updated>2021-07-21T15:31:17.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>人的细胞数量，约有37兆2千亿个。细胞们在你的身体的世界中，无休无眠地在工作着。趁热打铁，二话不多说开始进入函数之旅叭。其中，函数的参数及返回值是重点。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h2><p>函数就是对实现某一特定功能的代码的封装。这样做的好处是：函数能提高应用的模块性和代码的重复利用率。</p><p>打个简单的比喻，我们进店买喜茶、海底捞的时候，需要排队、点单、等待、买单等待繁琐的过程，但是通过食用市面上出售的瓶装喜茶、桶装海底捞，就能省去这些步骤，而后者就是封装。</p><p>举个栗子!就拿我们平常看到的验证码来说，这就是一个封装函数。直接调用函数名就可以生成n位随机数嗷（</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">def validate_code(n):</span><br><span class="line">    s= &#x27;qwertyuiopasdfghjklzxcvbnm1234567890&#x27; #验证码通常是26个英文字母加上10个数字组成</span><br><span class="line">    code = &#x27;&#x27;</span><br><span class="line">    for i in range(n):</span><br><span class="line">        r=random.choice(s)</span><br><span class="line">        code += r</span><br><span class="line">    print(&#x27;验证码是：&#123;&#125;&#x27;.format(code))</span><br><span class="line">validate_code(4)</span><br><span class="line">validate_code(5)</span><br><span class="line">validate_code(6)</span><br></pre></td></tr></table></figure><p>输出结果如图</p><p><img src="/2021/07/21/Python%E4%B9%8B%E5%87%BD%E6%95%B0/1.png" alt="随机验证码"></p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def 函数名([输入参数])：</span><br><span class="line">函数体</span><br><span class="line">[return xxx]</span><br></pre></td></tr></table></figure><p>注意：</p><p>1、英文字符以及冒号别遗忘（我经常忘冒号低级错误！</p><p>2、函数名要见名知意</p><p>3、参数之间用逗号隔开</p><p>4、函数体是实现函数功能的代码段，要tab缩进</p><p>5、return返回值，有时可以不写，下文介绍</p><h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><p>调用函数也就是执行函数。即把刚才定义的函数当成是一个工具，那么调用函数就相当于使用该工具。即函数名是调用函数的名称。很好理解，暂不赘述。</p><h1 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h1><h2 id="默认值参数"><a href="#默认值参数" class="headerlink" title="默认值参数"></a>默认值参数</h2><p>默认值是指在定义的时候就给定值，暂不赘述</p><h2 id="形式参数"><a href="#形式参数" class="headerlink" title="形式参数"></a>形式参数</h2><p>在定义函数时，函数名后面括号中的参数就是形式参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def fun1(a,b,c): #abd是在函数定义括号内，为形参</span><br><span class="line">print(&#x27;a=&#x27;,a)</span><br><span class="line">print(&#x27;b=&#x27;,b)</span><br><span class="line">print(&#x27;c=&#x27;,c)</span><br><span class="line">fun1(10,20,30)</span><br></pre></td></tr></table></figure><h2 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h2><p>指的是必须按照正确的顺序将实际参数传到函数中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def fun1(a,b,c): #abd是在函数定义括号内，为形参</span><br><span class="line">print(&#x27;a=&#x27;,a)</span><br><span class="line">print(&#x27;b=&#x27;,b)</span><br><span class="line">print(&#x27;c=&#x27;,c)</span><br><span class="line">fun1(10,20,30) # 依次将10赋给a，20赋给b，30赋给c。调用函数时传入的实参的数量和位置都必须和定义函数时保持一致。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#输出结果为</span><br><span class="line">a= 10</span><br><span class="line">b= 20</span><br><span class="line">c= 30</span><br></pre></td></tr></table></figure><h2 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h2><p>能在调用的时候更加明确参数值是给谁的，因此不再需要与形参的位置完全一致，只要将参数名写正确即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def fun1(a,b,c):</span><br><span class="line">    print(&#x27;a=&#x27;,a)</span><br><span class="line">    print(&#x27;b=&#x27;,b)</span><br><span class="line">    print(&#x27;c=&#x27;,c)</span><br><span class="line">fun1(10,20,30)</span><br><span class="line">fun1(a=100,c=2000,b=3000)#与位置形参相比，位置可以不用一一对应</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#输出结果为</span><br><span class="line">a= 100</span><br><span class="line">b= 3000</span><br><span class="line">c= 2000</span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>指在定义或者调用的时候不能明确参数的个数，此时如何定义才可以使参数个数更加灵活呢？–答案是，我们可以用<code>*args</code>或者<code>**kargs</code>，那..什么时候用 <code>*args</code>什么时候用<code>**kargs</code>呢？</p><h3 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def fun1(*args):</span><br><span class="line">    print(args)</span><br><span class="line">fun1(10)</span><br><span class="line">fun1(10,20,30)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#输出结果为元组</span><br><span class="line">(10,)</span><br><span class="line">(10, 20, 30)</span><br></pre></td></tr></table></figure><p>因此，无法事先确定传递的位置形参的个数时，用<code>*args</code>定义个数可变的位置形参</p><h3 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def fun2(**kargs):</span><br><span class="line">    print(kargs)</span><br><span class="line">fun2(a=10)</span><br><span class="line">fun2(a=10,b=20,c=30)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出结果为字典</span><br><span class="line">&#123;&#x27;a&#x27;: 10&#125; </span><br><span class="line">&#123;&#x27;a&#x27;: 10, &#x27;b&#x27;: 20, &#x27;c&#x27;: 30&#125;</span><br></pre></td></tr></table></figure><p>因此，无法事先确定传递的关键字实参的个数时，使用<code>**kargs</code>定义个数可变的关键字形参</p><h1 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h1><p>return 语句指定应该返回的值，该返回值可以是任意类型</p><p>需要注意的是，return 语句在同一函数中可以出现多次，但只要有一个得到执行，就会直接结束函数的执行。</p><h3 id="没有返回值的情况"><a href="#没有返回值的情况" class="headerlink" title="没有返回值的情况"></a>没有返回值的情况</h3><p>只是完成一个操作，函数体内可没有return语句。调用会返回None</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def fun():         </span><br><span class="line">    print(&#x27;hello&#x27;)</span><br><span class="line">    #return         #return可以省略不写</span><br><span class="line">fun()               #调用fun()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果为</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h3 id="有返回值的情况"><a href="#有返回值的情况" class="headerlink" title="有返回值的情况"></a>有返回值的情况</h3><p>函数的最后会有一个返回值return，将函数执行的结果返出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def fun3():</span><br><span class="line">    return&#x27;hello&#x27;,&#x27;world&#x27;</span><br><span class="line">print(fun3())              #返回值是两个，要用到return</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#输出结果是元组</span><br><span class="line">(&#x27;hello&#x27;, &#x27;world&#x27;)</span><br></pre></td></tr></table></figure><h1 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h1><h3 id="数字相关"><a href="#数字相关" class="headerlink" title="数字相关"></a><strong>数字相关</strong></h3><blockquote><p>bool() 将给定的数据类型转换成bool值。如果不给值，返回False</p><p>int () 将给定的数据转换成int值。如果不给值，返回0</p><p>float () 将给定的数据转换小数</p><p>complex () 创建一个复数，第一个参数为实部，第二个参数为虚部。或者第一个参数直接用字符串来描述复数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number = &#x27;100&#x27;</span><br><span class="line">print(int(number)) # 100</span><br><span class="line">print(float(number)) # 100.0</span><br><span class="line">print(bool(10))   # True</span><br></pre></td></tr></table></figure><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a><strong>进制转换</strong></h3><blockquote><p>bin() 将给的参数转换成二进制</p><p>otc() 将给定的参数转换成八进制</p><p>hex() 将给定的参数转换成十六进制</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number=25</span><br><span class="line">print(bin(number))  # 0b11001</span><br><span class="line">print(oct(number))  # 0o31</span><br><span class="line">print(hex(number))  # 0x19</span><br></pre></td></tr></table></figure><h3 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a><strong>数字运算</strong></h3><blockquote><p>abs() 返回绝对值</p><p>divmode() 返回商的余数</p><p>round () 四舍五入</p><p>pow(a,b) 求a 的b 次幂,如果有三个参数.则求完次幂后对第三个数取余</p><p>sum() 求和</p><p>min() 求最小值</p><p>max() 求最大值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number = -10.58</span><br><span class="line">print(abs(number)) # 10.58</span><br><span class="line">print(round(number)) # -11</span><br><span class="line">print(max(number,-9)) # -9</span><br></pre></td></tr></table></figure><h3 id="列表和元组"><a href="#列表和元组" class="headerlink" title="列表和元组"></a><strong>列表和元组</strong></h3><blockquote><p>list() 将一个可迭代对象转换成列表</p><p>tuple() 将一个可迭代对象转成元组</p><p>reversed() 将一个序列翻转, 返回翻转序列的迭代器</p><p>slice() 列表的切片，格式是(初:末 :step :)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = &#x27;hello&#x27;</span><br><span class="line">print(list(s)) # [&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = &quot;hello! I am Running&quot;</span><br><span class="line">s = slice(1, 10, 3)</span><br><span class="line">print(lst[s])     # eoI</span><br></pre></td></tr></table></figure><h3 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a><strong>字符串相关</strong></h3><blockquote><p>str () 将数据转换成字符串</p><p>format() 与具体数据相关,用于计算各种小数.精算等</p><p>memoryview() 查看bytes的内存中的情况</p><p>ord() 输入字符找带字符编码的位置</p><p>chr() 输入位置数字找对应的字符</p><p>ascii() 是sdcll码中的返回值 不是就返回\u..</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 找到对应字符的编码位置</span><br><span class="line">print(ord(&#x27;s&#x27;)) # 115</span><br><span class="line">print(ord(&#x27;苏&#x27;))  #33487</span><br><span class="line"># 找到对应编码位置的字符*</span><br><span class="line">print(chr(115))  #s</span><br><span class="line">print(chr(38597)) #雅,诶嘿嘿一不小心暴露真名</span><br><span class="line"># 在sacll码中就返回这个值. 如果不是就返回\u..*</span><br><span class="line">print(ascii(&#x27;a&#x27;)) *# &#x27;a&#x27;*</span><br><span class="line">print(ascii(&#x27;苏&#x27;))  *# &#x27;\u82cf&#x27;</span><br></pre></td></tr></table></figure><h3 id="数据集合"><a href="#数据集合" class="headerlink" title="数据集合"></a><strong>数据集合</strong></h3><blockquote><p>dict() 创建一个字典</p><p>set() 创建一个集合</p><p>frozenset() 创建一个冻结的集合.冻结的集合不能进行添加和删除操作</p></blockquote><h3 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a><strong>其他相关</strong></h3><blockquote><p>len() 返回一个对象中的元素的个数</p><p>sorted() 对可迭代对象进行排序</p><p>enumerate() 获取集合的枚举对象</p><p>all() 可迭代对象中全部是True.结果才是True</p><p>any() 可迭代对象中有一个是True,结果就是Ture</p><p>zip() 函数用于将可迭代的对象最为参数.将对象中对应的元素打包成一个个元组</p><p>eval() 执行字符串类型的代码,并返回最终的结果</p></blockquote><h3 id="内存相关"><a href="#内存相关" class="headerlink" title="内存相关"></a><strong>内存相关</strong></h3><blockquote><p>hash() 获取到对像的哈希值(int str bool tuple)</p><p>id () 获取到对象的内存地址</p></blockquote><p>以上内置函数算是比较常用的，其他就不一一列举啦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;人的细胞数量，约有37兆2千亿个。细胞们在你的身体的世界中，无休无眠地在工作着。趁热打铁，二话不多说开始进入函数之旅叭。其中，函数的参数及返</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://0w0suy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python" scheme="https://0w0suy.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Mysql服务器的基本配置及访问办法</title>
    <link href="https://0w0suy.github.io/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/"/>
    <id>https://0w0suy.github.io/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/</id>
    <published>2021-07-19T11:56:20.000Z</published>
    <updated>2021-07-21T03:39:15.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><p>存在即合理，从两个问题开始引入mysql</p><p>1、“这是什么？”</p><p>2、“为什么要有这个？”</p><h2 id="什么是数据库？"><a href="#什么是数据库？" class="headerlink" title="什么是数据库？"></a>什么是数据库？</h2><p>数据库，是用来存储数据的。数据库由表组成，表由列组成。这个表就像Excel一样，它适合存放一些文字信息。比如，id、密码、电话号码、地址等等，但是它不适合存放单个大体量的文件对象，比如，电影、照片。</p><p>简单的举个栗子，比如说QQ中的数据库，会存放users的网名、密码、QQ号、个性签名等数据，但是qq空间的动态里的视频、音乐、图片可能就不会放在数据库里。</p><h2 id="MySQL是什么？"><a href="#MySQL是什么？" class="headerlink" title="MySQL是什么？"></a><strong>MySQL是什么？</strong></h2><p>MySQL是一种数据库软件。数据库和MySQL的关系，就像是聊天软件与QQ、微信的关系。世界上有各种各样的数据库，比如Oracle、MySQL、SQL Server等等，一般互联网公司都会用MySQL，因为它是免费、使用范围最广。</p><p>MySQL已经成为当前网络中使用最多的数据库之一，特别是在Web应用上，它占据了中小型应用的绝对优势。这一切都源于它的小巧易用、安全有效、开放式许可和多平台，更主要的是它与三大Web语言之一——PHP的完美结合。</p><h2 id="SQL是什么？"><a href="#SQL是什么？" class="headerlink" title="SQL是什么？"></a><strong>SQL是什么</strong>？</h2><p>SQL是一种编程语言，就像Java、C++、Python。它是用来操纵数据库的一种语言。只需要上百个英文单词，SQL就能对数据进行让人眼花缭乱的操作。</p><h2 id="为什么要有数据库？"><a href="#为什么要有数据库？" class="headerlink" title="为什么要有数据库？"></a>为什么要有数据库？</h2><p>数据库可以让很多人同时地进行访问、更改数据。而excel不能供一个大型系统使用，它的性能不够好。（想象一下数亿人同时操控一个Excel文件，啊，那真是不能想象，一定卡顿爆）</p><hr><p>总的来说，数据库是一种数据存储系统，其中最具代表性的是mysql，我们使用sql语言对它进行操纵。</p><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>用户系统：Windows操作系统</p><p>工具：MySQL5.5软件</p><h1 id="数据库安全实验"><a href="#数据库安全实验" class="headerlink" title="数据库安全实验"></a>数据库安全实验</h1><p>1、安装MySQL</p><p>在MySQL官网上点download，进入MySQL Community server下载想要下载的版本，直接下载installer，不要下载zip压缩包（我下载的是5.5.29，截止到2021.07.19，最新版本是8.0.25，越稳定越好，随便下个5.5.29的）</p><p>几个非默认的页面需要注意一下（并非一直点next）</p><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A41.png" alt="勾选server machine"></p><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/step2.png" alt="勾选manual，并选择utf8"></p><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/step3.png" alt="勾选include bin directory in windows path"></p><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/step4.png" alt="等待四个自动勾选后安装完成"></p><p>2、MySQL密码为安装时所设，键入后回车，界面如下。</p><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/a.png"></p><p>3、运行下图命令，查看User表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql</span><br></pre></td></tr></table></figure><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/b.png"></p><p>4、运行update命令，将MySQL数据库root用户的口令改成123456。其中最后一句命令flush privileges的意思是强制刷新内存授权表，否则用的还是缓冲中的口令，这时非法用户还可以用root用户及空口令登录，直到重启MySQL服务器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update user set password = password(&#x27;123456&#x27;) where user=&#x27;root&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/c.png"></p><p>5、运行delete命令，删除空用户。Host字段为localhost的匿名用户拥有所有的权限，就是说本地用户用空的用户名和空的口令登录MySQL数据库服务器可以得到最高的权限，所以匿名用户必须删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from user where user=&#x27;&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/d.png"></p><p>6、Desc User</p><p>User表是授权表中最重要的一个，运行下图命令，列出可以连接服务器的用户及其加密口令，并且它指定它们有哪种全局（超级用户）权限。在User表启用的任何权限均是全局权限，并适用于所有数据库。所以我们不能给任何用户访问MySQL. User表的权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc user;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/e.png"></p><p>7、Desc DB</p><p>运行下图命令，查看DB表，列出所有数据库，而用户有权限访问它们。在这里指定的权限适用于一个数据库中的所有表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">desc db;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/f.png"></p><p>8、Desc Host</p><p>Host表如下图所示，与DB表结合使用在一个较好层次上控制特定主机对数据库的访问权限，这可能比单独使用DB好些。这个表不受GRANT和REVOKE语句的影响。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc host;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/g.png"></p><p>9、设置用户权限</p><p>如下图命令用于在本地增加一个具有所有权限的test 用户(超级用户)，密码是test。ON子句中的*.*意味着“所有数据库、所有表”。with grant option表示它具有grant权限。用grant语句创建权限是不需要再手工刷新授权表的，因为它已经自动刷新了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to test@localhost identified by &#x27;test&#x27; with grant option;</span><br><span class="line">select User,Password from user;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/h.png"></p><p>查看运行结果，如下图。</p><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/i.png"></p><p>10、删除用户的权限，并删除用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">revoke all on *.* from test@localhost;</span><br><span class="line">delete from user where user=&#x27;test&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>删除用户权限。</p><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/j.png"></p><p>删除用户test。</p><p><img src="/2021/07/19/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AE%BF%E9%97%AE%E5%8A%9E%E6%B3%95/k.png"></p><p>到这就OK啦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;预备知识&quot;&gt;&lt;a href=&quot;#预备知识&quot; class=&quot;headerlink&quot; title=&quot;预备知识&quot;&gt;&lt;/a&gt;预备知识&lt;/h1&gt;&lt;p&gt;存在即合理，从两个问题开始引入mysql&lt;/p&gt;
&lt;p&gt;1、“这是什么？”&lt;/p&gt;
&lt;p&gt;2、“为什么要有这个？”&lt;/p&gt;
</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://0w0suy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="https://0w0suy.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>hexo根目录中_config.yml配置解释</title>
    <link href="https://0w0suy.github.io/2021/07/17/hexo%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%AD-config-yml%E9%85%8D%E7%BD%AE%E8%A7%A3%E9%87%8A/"/>
    <id>https://0w0suy.github.io/2021/07/17/hexo%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%AD-config-yml%E9%85%8D%E7%BD%AE%E8%A7%A3%E9%87%8A/</id>
    <published>2021-07-17T08:35:10.000Z</published>
    <updated>2021-07-21T03:39:15.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在学习发博客的时候，经常会出现报错，而这些报错通常会让我们修改根目录中_config.yml某些配置，然而我也是不知所以然就”照本宣改”,甚至会想当然的改掉了原来一些配置，导致hexo d运行报错。因此，通过这篇blog对config的配置进行解释说明。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`#Hexo Configuration`</span><br><span class="line">`##Docs: https://hexo.io/docs/configuration.html`</span><br><span class="line">`##Source: https://github.com/hexojs/hexo/`</span><br></pre></td></tr></table></figure><p>第二、三行表示hexo文档的相关文档，Docs指的是hexo的文档，Source指的是hexo的Github源码。</p><h1 id="网站Site"><a href="#网站Site" class="headerlink" title="网站Site"></a>网站Site</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#site</span><br><span class="line">title: Hexo</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: &#x27;&#x27;</span><br><span class="line">author: John Doe</span><br><span class="line">language: en</span><br><span class="line">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure><p><strong>title</strong>: 网站的名字，会写在hexo g命令生成后的public文件夹下的index.html文件的title标签里。</p><p><img src="https://www.freesion.com/images/403/03f9794fe0d3b46630a8885e90f29913.png" alt="index.html文件中"></p><p>我们也可以在默认的主题的首页左下角找到</p><p><img src="/2021/07/17/hexo%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%AD-config-yml%E9%85%8D%E7%BD%AE%E8%A7%A3%E9%87%8A/q.png" alt="首页底下title"></p><p><strong>subtitle</strong>：网站的副标题，生成的时候默认为空，我们可以试着给他赋个值看它会出现在哪。</p><p><img src="/2021/07/17/hexo%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%AD-config-yml%E9%85%8D%E7%BD%AE%E8%A7%A3%E9%87%8A/f.png" alt="hexoTest"></p><p>在这个默认的主题里，它写在背景图中间，也就是hexo的正下方。</p><p><strong>author</strong>：顾名思义就是作者，这个也只是署个名而已<br><strong>language</strong>：这里就写了网站使用的语言，en表示英文<br><strong>timezone</strong>：网站对应的时区，一般情况下不用去刻意配置，会默认使用电脑的时区，但如果发布到其他地方的服务器，可能会使用当地服务器的时区，此时如果有需要用到本电脑的时区就要手动设置时区了，一般中国的时区可以设置为Asia/Shanghai</p><h1 id="网址URL"><a href="#网址URL" class="headerlink" title="网址URL"></a>网址URL</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line">##如果你的网站位于子目录中，请将网址url设置为&#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line">url: https://0w0suy.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><p><strong>url</strong>：网站的网址<br><strong>root</strong>：网站的根目录<br><strong>permalink</strong>：文章的永久链接格式</p><p>比如我的这篇blog，它的链接格式就是year/:month/:day/:title/</p><p><img src="/2021/07/17/hexo%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%AD-config-yml%E9%85%8D%E7%BD%AE%E8%A7%A3%E9%87%8A/a.png"></p><p>并且在D:\blog\blog\public\2021\07这里面，也是按照日期进行归类的</p><p><img src="/2021/07/17/hexo%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%AD-config-yml%E9%85%8D%E7%BD%AE%E8%A7%A3%E9%87%8A/b.png"></p><p><strong>permalink_defaults</strong>：为permalink中各项的默认值</p><h1 id="目录Directory"><a href="#目录Directory" class="headerlink" title="目录Directory"></a>目录Directory</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br></pre></td></tr></table></figure><p><strong>source_dir</strong>：存放hexo文章的文件夹，我们写的md文件都放在这个配置对应的文件夹下，默认值是source<br><strong>public_dir</strong>：存放hexo g生成的文件，执行hexo g后根目录就会出现这个文件夹，默认值是public<br><strong>tag_dir</strong>：按标签存放文章的目录，默认值是tags，如果我们给文章添加标签，使用hexo g时public文件夹下就会多出一个tags文件夹（根据我们的配置文件夹名不同）比如到目前为止（2021.7.17)我的tag分为四类</p><p><img src="/2021/07/17/hexo%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%AD-config-yml%E9%85%8D%E7%BD%AE%E8%A7%A3%E9%87%8A/c.png" alt="tag_dir"></p><p><strong>archive_dir</strong>：归档文件夹，存放归档文件，默认值为archives<br><strong>category_dir</strong>：分类文件夹，按分类存放的文件，和上面的tags一样，只要在文章中的Font-matter添加了categories就会在使用hexo g构造时出现相应的文件夹，在D:\blog\blog\public\categories中</p><p><img src="/2021/07/17/hexo%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%AD-config-yml%E9%85%8D%E7%BD%AE%E8%A7%A3%E9%87%8A/d.png" alt="categories"></p><p><strong>code_dir</strong>：Include code 文件夹，source_dir 下的子目录，默认值为downloads/code<br><strong>i18n_dir</strong>：国际化（i18n）文件夹，默认值:lang<br><strong>skip_render</strong>：跳过指定文件的渲染，匹配到的文件将会被不做改动复制到public文件夹下，如果路径对应的是我们的文章，那会直接忽略掉该文章，我们这样设置来忽略掉hello-world.md文件</p><h1 id="文章Writing"><a href="#文章Writing" class="headerlink" title="文章Writing"></a>文章Writing</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link:</span><br><span class="line">  enable: true # Open external links in new tab</span><br><span class="line">  field: site # Apply to the whole site</span><br><span class="line">  exclude: &#x27;&#x27;</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: true</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br></pre></td></tr></table></figure><p><strong>new_post_name</strong>：新文章的默认名称，我们是使用hexo new来构造文章的，生成的文章名就是通过这里配置的，也就是标题.md，生成的md文件可以在D:\blog\blog\source_posts中找到<br><strong>default_layout</strong>：预设布局，hexo new可以创建三种文件，post/帖子，draft/草稿，page/页面，这里设置默认值在使用hexo new就可以直接创建对应默认类型的文章，设置了post就等同于说在命令行执行hexo new <name>和执行hexo new post <name>是一样的，也可以设置为draft和page。所以我们在hexo new 的时候是默认生成post文件，而非draft和page<br><strong>titlecase</strong>：把标题转换为 titlecase，但因为为FALSE，所以不转化<br><strong>external_link</strong></name></name></p><ul><li>enable：是否在新标签中打开链接，为TRUE</li><li>fileds：external_link.enable的配置对当前网站（site）生效或仅对文章（post）生效，默认为site</li><li>exclude：需要排除的域名</li></ul><p><strong>filename_case</strong>：把文件名称转换为小写(1)或者大写(2)，默认不转换(0)</p><p><strong>render_drafts</strong>：是否渲染草稿文件，默认为false不渲染<br><strong>post_asset_folder</strong>：是否启动资源文件夹，对于我们的网站，如果我们的文章里面有图片，我们可以在source文件夹下建立一个统一的images文件夹来存放图片，但是如果有的文章有很多的资源文件如图片，我们可以通过设置该配置为true，这样在source文件夹下创建文件的同时也会创建一个同名文件夹来存放相应的资源，比如我设置为true，然后执行hexo new “hexo根目录中_config.yml配置解释”，对应的，在D:\blog\blog\source_posts中会生成一个匹配的文件夹，专门存放图片<img src="/2021/07/17/hexo%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%AD-config-yml%E9%85%8D%E7%BD%AE%E8%A7%A3%E9%87%8A/e.png"></p><p><img src="/2021/07/17/hexo%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%AD-config-yml%E9%85%8D%E7%BD%AE%E8%A7%A3%E9%87%8A/g.png" alt="图片文件夹"></p><p><strong>relative_link</strong>：是否把链接改为与根目录的相对地址，默认为false<br><strong>future</strong>：是否显示当前时间之后的文章，默认为true，如果设置为false的话，我们设置的日期如果是未来的日期的话，就不会显示<br><strong>highlight</strong>：代码块的设置</p><ul><li>enable：开启代码高亮，默认为true</li><li>auto_detect：如果未指定语言，就自动检测，默认为false</li><li>line_number：显示代码的行数，默认为true</li><li>tab_replace：用n个空格来代表tab键，如果值为空，则不会代替tab键</li></ul><h1 id="主页设置Home-page-setting"><a href="#主页设置Home-page-setting" class="headerlink" title="主页设置Home page setting"></a>主页设置Home page setting</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> # path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &#x27;&#x27;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br></pre></td></tr></table></figure><p><strong>index_generator</strong>：主页相关的设置</p><ul><li>path：主页对应的路径，默认为 ‘ ‘，即域名根目录就是主页的路径</li><li>per_page：每页显示的帖子数，默认为10</li><li>order_by：帖子的排序，默认为-date，即按日期倒序排</li></ul><h1 id="分类和标签Category-amp-Tag"><a href="#分类和标签Category-amp-Tag" class="headerlink" title="分类和标签Category&amp;Tag"></a>分类和标签Category&amp;Tag</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">default_category: uncategorized </span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br></pre></td></tr></table></figure><p><code>default_category: uncategorized</code> 默认分类<br><code>category_map:</code>分类别名<br><code>tag_map:</code>标签别名</p><h1 id="日期、时间格式Date-Time-format"><a href="#日期、时间格式Date-Time-format" class="headerlink" title="日期、时间格式Date/Time format"></a>日期、时间格式Date/Time format</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br></pre></td></tr></table></figure><p><strong>date_format</strong>：日期格式，默认为YYYY-MM-DD，即年月日<br><strong>time_format</strong>：时间格式，默认为HH:mm:ss，即时分秒</p><h1 id="分页Pagination"><a href="#分页Pagination" class="headerlink" title="分页Pagination"></a>分页Pagination</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br></pre></td></tr></table></figure><p><strong>per_page</strong>：分页时每页的文章数，如果为0则不分页，默认为10<br><strong>pagination_dir</strong>分页的目录，默认为page，对应于public文件夹下的archives文件夹下的page文件夹，如果只有一页是不会生成这个文件夹的</p><h1 id="主题Extensions"><a href="#主题Extensions" class="headerlink" title="主题Extensions"></a>主题Extensions</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: landscape</span><br></pre></td></tr></table></figure><p>theme: landscape <em># 当前使用的主题名</em></p><h1 id="部署Deployment"><a href="#部署Deployment" class="headerlink" title="部署Deployment"></a>部署Deployment</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/0w0suy/0w0suy.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>repo:  <em># 库地址</em>  </p><p>branch:  <em># 分支名称</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在学习发博客的时候，经常会出现报错，而这些报错通常会让我们修改根目录中_config.yml某些配置，然而我也是不知所以然就”照本宣改”,甚</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://0w0suy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="hexo" scheme="https://0w0suy.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Python实例1--文本进度条</title>
    <link href="https://0w0suy.github.io/2021/07/16/Python%E5%AE%9E%E4%BE%8B1--%E6%96%87%E6%9C%AC%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <id>https://0w0suy.github.io/2021/07/16/Python%E5%AE%9E%E4%BE%8B1--%E6%96%87%E6%9C%AC%E8%BF%9B%E5%BA%A6%E6%9D%A1/</id>
    <published>2021-07-16T00:15:48.000Z</published>
    <updated>2021-07-21T03:39:15.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文本进度条的分析"><a href="#文本进度条的分析" class="headerlink" title="文本进度条的分析"></a>文本进度条的分析</h1><p>1、采用字符串方式打印可以动态变化的文本进度条</p><p>2、进度条需要能在一行中逐渐变化</p><p>3、采用sleep（）模拟一个持续的进度</p><h1 id="文本进度条框架"><a href="#文本进度条框架" class="headerlink" title="文本进度条框架"></a>文本进度条框架</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">scale = 10</span><br><span class="line">print(&quot;-----开始阅读------&quot;)</span><br><span class="line">for i in range(scale+1):</span><br><span class="line">    a = &#x27;*&#x27;*i</span><br><span class="line">    b = &#x27;.&#x27;*(scale - i)</span><br><span class="line">    c = (i/scale)*100</span><br><span class="line">    print(&quot;&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&quot;.format(c,a,b))</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">print(&quot;------阅读完毕------&quot;)</span><br></pre></td></tr></table></figure><p>执行结果如下图</p><p><img src="/2021/07/16/Python%E5%AE%9E%E4%BE%8B1--%E6%96%87%E6%9C%AC%E8%BF%9B%E5%BA%A6%E6%9D%A1/a.png" alt="运行结果"></p><p>我们可以看到这个文本进度条包括百分比，”开始阅读”及”阅读完毕”的字眼，以及剩余阅读部分的进度条格式。</p><h2 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br></pre></td></tr></table></figure><p>我们先引入一个time库，整体用sleep函数，来生成一个持续不断的时间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;-----开始阅读------&quot;)</span><br><span class="line"></span><br><span class="line">print(&quot;------阅读完毕------&quot;)</span><br></pre></td></tr></table></figure><p>我们打印了开始阅读和阅读完毕的字眼，为了使看起来更加美观，引入了减号”-“，字体居中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scale = 10</span><br></pre></td></tr></table></figure><p>scale指的是文本进度条的大概宽度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in range(scale+1):</span><br></pre></td></tr></table></figure><p>for循环，for i in range 这样的表达方式，表示遍历range（） 对象。之所以称为遍历循环，是因为for语句的循环执行次数是根据遍历结构中元素的个数确定的。遍历循环可以简单的理解为从遍历结构中逐一提取元素，放入循环变量中，对于每个所提取的元素执行一次循环体语句，当遍历结构中所有的元素都被访问遍了，遍历循环就正常结束。</p><p>放到进度条中，可以理解为，每经过一个循环，计算机完成一个任务，打印一个进度条，计算机再完成一个任务，再打印一个进度条。直到进度条百分百，即完成了任务，打印出“阅读完毕”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = &#x27;*&#x27;*i</span><br></pre></td></tr></table></figure><p>定义a，字符*与循环变量i的乘积</p><p>(在字符串中学过，字符串与整数的乘积表示字符串被复制的次数)  </p><p>因此，a表示星号*被复制的次数，而星号指当前的百分比所表达的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = &#x27;.&#x27;*(scale - i)</span><br></pre></td></tr></table></figure><p>  定义b，用.表示，与当前剩余的进度条的笔记之间的乘积。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = (i/scale)*100</span><br></pre></td></tr></table></figure><p>   c指的是我们输出与当前进度条和进度相关的百分比</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&quot;.format(c,a,b))</span><br></pre></td></tr></table></figure><p>前面我们学过，百分比%和括号{}，可以表示占位符。用三个占位符表示三个槽。<code>&#123;:^3.0f&#125;%</code>表示某%，<code>[&#123;&#125;-&gt;&#123;&#125;]</code>前者占位符表示星号*，即已阅读进度条，后者占位符表示点.，即剩余进度条。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.sleep(0.1)</span><br></pre></td></tr></table></figure><p>表示将程序短暂的停顿1秒</p><h1 id="单行动态刷新"><a href="#单行动态刷新" class="headerlink" title="单行动态刷新"></a>单行动态刷新</h1><h2 id="刷新的本质"><a href="#刷新的本质" class="headerlink" title="刷新的本质"></a>刷新的本质</h2><p>刷新的本质是用后打印的字符覆盖之前的字符。</p><p>比如说，截止到2021年7月16日9点19分，国内疫情实时大数据报告有9007979480人在浏览这个网页，当我刷新一次截止到2021年7月16日9点20分，这个数据变成了9007982317，用后面的数据覆盖了原来数据的位置，之前的数据被替换，对用户来说，这就是刷新效果。</p><p>这就需要我们的程序，在输出某一个 字符的字符串的时候，不能够换行到下一行。因为一旦换行到下一行，之前的数据就不能被后来的所覆盖。因为print函数执行完后会进行到下一行，所以我们要让print不能换行。并且要让光标退回到之前的位置，实现覆盖。</p><p>总而言之，刷新要做到两点:</p><p>1.不能换行</p><p>2.要能退回</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">for i in range(101):</span><br><span class="line">    print(&quot;\r&#123;:3&#125;%&quot;.format(i),end=&quot;&quot;)</span><br><span class="line">    time.sleep(0.1)</span><br></pre></td></tr></table></figure><p>执行结果如下图</p><p><img src="/2021/07/16/Python%E5%AE%9E%E4%BE%8B1--%E6%96%87%E6%9C%AC%E8%BF%9B%E5%BA%A6%E6%9D%A1/b.png" alt="单行刷新运行结果"></p><h2 id="分析代码-1"><a href="#分析代码-1" class="headerlink" title="分析代码"></a>分析代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br></pre></td></tr></table></figure><p>还是使用time库的sleep函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`for i in range(101):`</span><br></pre></td></tr></table></figure><p>构造101次的循环过程。因为为了输入文本进度条，从0%到100</p><p>%，划分为101次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;\r&#123;:3&#125;%&quot;.format(i),end=&quot;&quot;)</span><br></pre></td></tr></table></figure><p> 在format后面增加了<code>,end=&quot;&quot;</code>，这是print函数的一个参数，end后字符串为空字符，表示print完不会增加新的内容，光标还是停留在最后一个字符上。<code>\r&#123;:3&#125;%</code>表示在打印输出字符串之前，将光标退回到当前行的行首。</p><p>简单来说，在每次输出前，把光标放到行首，覆盖原来的数据，在输出后也不换行，下一次循环再输出的时候，再把光标放到行首，覆盖上次的数据后，再输出，又不换行。这样就构成了一种单行刷新的效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.sleep(0.1)</span><br></pre></td></tr></table></figure><p>表示将程序短暂的停顿1秒</p><h2 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h2><p>我们看到的是从0%到100%的结果，但实际上是一个一个覆盖刷新的效果。因为IDLE本身是一个编写式的开发环境，它并不是程序运行的主要环境。</p><p><img src="/2021/07/16/Python%E5%AE%9E%E4%BE%8B1--%E6%96%87%E6%9C%AC%E8%BF%9B%E5%BA%A6%E6%9D%A1/c.png" alt="如图，一个一个输出"></p><h1 id="进度条的改进完善"><a href="#进度条的改进完善" class="headerlink" title="进度条的改进完善"></a>进度条的改进完善</h1><h2 id="运用知识"><a href="#运用知识" class="headerlink" title="运用知识"></a>运用知识</h2><p>1、字符串处理</p><p>2、数字处理</p><p>3、时间库的使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">scale = 50</span><br><span class="line">print(&quot;开始阅读&quot;.center(scale//2,&quot;-&quot;))</span><br><span class="line">start = time.perf_counter()</span><br><span class="line">for i in range(scale+1):</span><br><span class="line">    a = &#x27;*&#x27;*1</span><br><span class="line">    b = &#x27;.&#x27;*(scale - i)</span><br><span class="line">    c = (i/scale)*100</span><br><span class="line">    dur = time.perf_counter() - start</span><br><span class="line">    print(&quot;\r:&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&quot;.format(c,a,b,dur),end=&quot;&quot;)</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">print(&quot;\n&quot;+&quot;阅读完毕&quot;.center(scale//2,&quot;-&quot;))</span><br></pre></td></tr></table></figure><p>运行结果如下图</p><p><img src="/2021/07/16/Python%E5%AE%9E%E4%BE%8B1--%E6%96%87%E6%9C%AC%E8%BF%9B%E5%BA%A6%E6%9D%A1/d.png" alt="完善后得！"></p><p>区别：</p><p><code>print(&quot;-----开始阅读------&quot;)</code></p><p><code>print(&quot;开始阅读&quot;.center(scale//2,&quot;-&quot;))</code></p><p>刚开始我们为了让结果看起来更美观，用减号-来分隔，但如果页面布局或大小变化，这样显得不太智能。现在我们使用字符串处理中的<code>.center</code>方法，将一个-字符填充在执行开始或者执行结束的两侧，通过填充的方式，自动实现减号构成的分隔线条。</p><p>并且我们还增加了计时效果<code>start = time.perf_counter()</code>，确定了一个开始时间，而<code> dur = time.perf_counter() - start</code>表示每次循环所消耗的时间。</p><p><code>print(&quot;\r:&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&quot;.format(c,a,b,dur),end=&quot;&quot;)</code>中的<code>\n    </code>，表示文本的刷新效果，实现光标向行首移动。<code>end=&quot;&quot;</code>表示每次输出后不换行。</p><h1 id="进度条的举一反三"><a href="#进度条的举一反三" class="headerlink" title="进度条的举一反三"></a>进度条的举一反三</h1><h2 id="计算问题扩展"><a href="#计算问题扩展" class="headerlink" title="计算问题扩展"></a>计算问题扩展</h2><p>文本进度条程序使用了perf_counter()计时，计时方法适合各类需要统计时间的计算问题。</p><p>在上文我们可以看到在每次打印进度条后，会加上一个时间，即相隔循环打印时间。这样我们就可以用perf_counter()来比较不同算法时间、统计部分程序运行时间。</p><h2 id="进度条应用扩展"><a href="#进度条应用扩展" class="headerlink" title="进度条应用扩展"></a>进度条应用扩展</h2><p>不仅可以应用于文本进度条，也可以在大型加载的程序中增加进度条，因为进度条是人机交互的桥梁，通过进度条我们可以直观的看到计算机运行的进度，可以给我们带来对程序更好的理解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文本进度条的分析&quot;&gt;&lt;a href=&quot;#文本进度条的分析&quot; class=&quot;headerlink&quot; title=&quot;文本进度条的分析&quot;&gt;&lt;/a&gt;文本进度条的分析&lt;/h1&gt;&lt;p&gt;1、采用字符串方式打印可以动态变化的文本进度条&lt;/p&gt;
&lt;p&gt;2、进度条需要能在一行中逐渐变</summary>
      
    
    
    
    <category term="实例" scheme="https://0w0suy.github.io/categories/%E5%AE%9E%E4%BE%8B/"/>
    
    
    <category term="python" scheme="https://0w0suy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>markdown的基础语法</title>
    <link href="https://0w0suy.github.io/2021/07/14/markdown%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://0w0suy.github.io/2021/07/14/markdown%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2021-07-14T03:37:28.000Z</published>
    <updated>2021-07-21T03:39:15.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>写过博客的都知道Markdown语法的重要性，否则就会像我一样，在 hexo d 后出现warn警告。这篇博客将轻松搞定Markdown语法~</p><h1 id="一、快捷键"><a href="#一、快捷键" class="headerlink" title="一、快捷键"></a><strong>一、快捷键</strong></h1><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>加粗</td><td>Ctrl+B</td></tr><tr><td>斜体</td><td>Ctrl+I</td></tr><tr><td>引用</td><td>Ctrl+Q</td></tr><tr><td>插入链接</td><td>Ctrl+L</td></tr><tr><td>插入代码</td><td>Ctrl+K</td></tr><tr><td>插入图片</td><td>Ctrl+G</td></tr><tr><td>有序列表</td><td>Ctrl+O</td></tr><tr><td>无序列表</td><td>Ctrl+U</td></tr><tr><td>横线</td><td>Ctrl+R</td></tr><tr><td>撤销</td><td>Ctrl+Z</td></tr><tr><td>保存</td><td>Ctrl+S</td></tr></tbody></table><h1 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a><strong>二、基本语法</strong></h1><h2 id="2-1-字体设置"><a href="#2-1-字体设置" class="headerlink" title="2.1 字体设置"></a>2.1 字体设置</h2><table><thead><tr><th>输入内容</th><th>显示效果</th></tr></thead><tbody><tr><td>文本前后各加一个”*”</td><td><em>0w0suy</em>斜体</td></tr><tr><td>文本前后各加一个”_”</td><td><em>0w0suy</em> 斜体</td></tr><tr><td>文本前后各加两个”*”</td><td><strong>0w0suy</strong>加粗</td></tr><tr><td>文本前后各加三个”*”</td><td><em><strong>0w0suy</strong></em>斜体加粗</td></tr><tr><td>文本前后各加一个”~”</td><td><del>0w0suy</del>下划线</td></tr></tbody></table><h2 id="2-2-分级标题"><a href="#2-2-分级标题" class="headerlink" title="2.2 分级标题"></a>2.2 分级标题</h2><table><thead><tr><th>输入内容</th><th>显示效果</th></tr></thead><tbody><tr><td>文本前加一个”#”</td><td>一级标题</td></tr><tr><td>文本前加两个”#”</td><td>二级标题</td></tr><tr><td>文本前加三个”#”</td><td>三级标题</td></tr><tr><td>文本前加四个”#”</td><td>四级标题</td></tr><tr><td>注意：#后空一格在输入文本</td><td></td></tr></tbody></table><h2 id="2-3-链接"><a href="#2-3-链接" class="headerlink" title="2.3 链接"></a>2.3 链接</h2><h3 id="2-3-1-插入本地图片链接"><a href="#2-3-1-插入本地图片链接" class="headerlink" title="2.3.1 插入本地图片链接"></a>2.3.1 插入本地图片链接</h3><pre><code>![图片描述](图片路径&quot;title&quot;)</code></pre><h3 id="2-3-2-插入网络图片"><a href="#2-3-2-插入网络图片" class="headerlink" title="2.3.2 插入网络图片"></a>2.3.2 插入网络图片</h3><p>只需要在语法的括号中填入图片的网络链接即可<br>例如：</p><h2 id="2-4-分割线"><a href="#2-4-分割线" class="headerlink" title="2.4 分割线"></a>2.4 分割线</h2><p>在一行中输入三个”*”,”-“,”_”都可以建立分割线，行内不能有其他东西，分割线效果如下</p><hr><h2 id="2-5-代码块"><a href="#2-5-代码块" class="headerlink" title="2.5 代码块"></a>2.5 代码块</h2><p>在写博客的时候，插入代码块这个功能是必不可少的，如果不插入代码块，就没办法直观地显示出代码指令，从而直接运行代码<br>插入代码块的方式有两种，一种是利用缩进（tab），另一种是利用英文反引号符号（在英文输入法下，与~同键，按一下即可打出`）</p><h3 id="2-5-1代码块"><a href="#2-5-1代码块" class="headerlink" title="2.5.1代码块"></a>2.5.1代码块</h3><p>缩进4个空格或者按一下tab键，接着输入代码</p><h3 id="2-5-2行内式"><a href="#2-5-2行内式" class="headerlink" title="2.5.2行内式"></a>2.5.2行内式</h3><p>在一个行内需要引用代码的话，只要用反引号就可<br>例如，我的ID是 <code>0w0suy</code></p><h3 id="2-5-3多行代码块与语法高亮"><a href="#2-5-3多行代码块与语法高亮" class="headerlink" title="2.5.3多行代码块与语法高亮"></a>2.5.3多行代码块与语法高亮</h3><p>在需要高亮的代码块的前一行和后一行使用三个反引号即可,如下图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure><h3 id="2-5-4代码块里面包含html代码"><a href="#2-5-4代码块里面包含html代码" class="headerlink" title="2.5.4代码块里面包含html代码"></a>2.5.4代码块里面包含html代码</h3><p>在代码区块里面，&amp;、&lt;、&gt;，会自动转化成HTML实体</p><h2 id="2-6-引用"><a href="#2-6-引用" class="headerlink" title="2.6 引用"></a>2.6 引用</h2><h3 id="2-6-1基本使用"><a href="#2-6-1基本使用" class="headerlink" title="2.6.1基本使用"></a>2.6.1基本使用</h3><p>在被引用的文本前面加上”&gt;”符号，并空格，使用效果如下</p><blockquote><p>0w0suy</p></blockquote><p>这是输入内容： &gt;0w0suy</p><h3 id="2-6-2嵌套引用"><a href="#2-6-2嵌套引用" class="headerlink" title="2.6.2嵌套引用"></a>2.6.2嵌套引用</h3><p>使用效果如下</p><blockquote><blockquote><blockquote><p>引用1<br>引用2<br>引用3</p></blockquote></blockquote></blockquote><p>这是输入内容：&gt;&gt;&gt;引用1，&gt;&gt; 引用2，&gt; 引用3</p><h2 id="2-7-表格"><a href="#2-7-表格" class="headerlink" title="2.7 表格"></a>2.7 表格</h2><p>以第一大点的快捷键中表格制作为例，表格的基本写法跟表格的形状很相似<br>代码及效果图如下:<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能 | 快捷键 |</span><br><span class="line">- | - | </span><br><span class="line">加粗 | Ctrl+B</span><br><span class="line">斜体 | Ctrl+I</span><br><span class="line">引用|Ctrl+Q</span><br></pre></td></tr></table></figure></p><hr><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>加粗</td><td>Ctrl+B</td></tr><tr><td>斜体</td><td>Ctrl+I</td></tr><tr><td>引用</td><td>Ctrl+Q</td></tr></tbody></table><h1 id="三、常用技巧"><a href="#三、常用技巧" class="headerlink" title="三、常用技巧"></a><strong>三、常用技巧</strong></h1><h2 id="3-1-换行"><a href="#3-1-换行" class="headerlink" title="3.1 换行"></a>3.1 换行</h2><p>方法1：连续按两个以上空格+回车<br>方法2：使用HTML语言换行标签</p><h2 id="3-2-缩进字符"><a href="#3-2-缩进字符" class="headerlink" title="3.2 缩进字符"></a>3.2 缩进字符</h2><p><code>&amp;nbsp;我爱学习</code>   &nbsp;我爱学习（缩进四分之一中文）<br><code> &amp;ensp;我爱学习</code>  &ensp;我爱学习 （缩进半个中文，1字符）<br><code> &amp;emsp;我爱学习</code>  &emsp;我爱学习  （缩进1个中文，2字符）</p><h2 id="3-3-特殊符号"><a href="#3-3-特殊符号" class="headerlink" title="3.3 特殊符号"></a>3.3 特殊符号</h2><h3 id="3-3-1基本符号"><a href="#3-3-1基本符号" class="headerlink" title="3.3.1基本符号"></a>3.3.1基本符号</h3><p>对于Markdown中的语法符号，前面加反斜线\即可显示符号本身<br>格式为<code>\符号</code><br>\反斜线<br>*星号<br>_下划线<br>#井号<br>.句点<br>!感叹号</p><h3 id="3-3-2特殊符号"><a href="#3-3-2特殊符号" class="headerlink" title="3.3.2特殊符号"></a>3.3.2特殊符号</h3><p><code>&amp;#10084;</code> &#10084;<br><code>&amp;#10003;</code> &#10003;<br><code>&amp;#9728;</code> &#9728;<br><code>&amp;#9733;</code> &#9733;<br><code>&amp;#9730;</code> &#9730;<br><code>&amp;#9775;</code> &#9775;<br><code>&amp;#10052;</code> &#10052;<br><code>&amp;#9835;</code> &#9835;<br>想知道更多的字符对应的unicode码，可以看这个网站：<a href="https://unicode-table.com/cn/">https://unicode-table.com/cn/</a></p><h2 id="3-4-字体、字号、颜色、背景色"><a href="#3-4-字体、字号、颜色、背景色" class="headerlink" title="3.4 字体、字号、颜色、背景色"></a>3.4 字体、字号、颜色、背景色</h2><p>Markdown本身不支持修改字体、字号与颜色等功能</p><h2 id="3-5-链接的高级操作"><a href="#3-5-链接的高级操作" class="headerlink" title="3.5 链接的高级操作"></a>3.5 链接的高级操作</h2><h3 id="3-5-1行内式"><a href="#3-5-1行内式" class="headerlink" title="3.5.1行内式"></a>3.5.1行内式</h3><p>参考上文语法，在一个行内需要引用代码的话，只要用反引号就可<br>例如，我的ID是 <code>0w0suy</code></p><h3 id="3-5-2参考式链接"><a href="#3-5-2参考式链接" class="headerlink" title="3.5.2参考式链接"></a>3.5.2参考式链接</h3><p>在文档要插入图片的地方写 ![图片或网址链接][标记]，在文档的最后写上[标记]:图片地址”标题”</p><h3 id="3-5-3-内容目录"><a href="#3-5-3-内容目录" class="headerlink" title="3.5.3 内容目录"></a>3.5.3 内容目录</h3><p>在段落中填写[top]以显示全文内容的目录结构</p><h3 id="3-5-4-注脚"><a href="#3-5-4-注脚" class="headerlink" title="3.5.4 注脚"></a>3.5.4 注脚</h3><h2 id="3-6-emoji表情符号"><a href="#3-6-emoji表情符号" class="headerlink" title="3.6 emoji表情符号"></a>3.6 emoji表情符号</h2><h1 id="四、高端用法"><a href="#四、高端用法" class="headerlink" title="四、高端用法"></a><strong>四、高端用法</strong></h1><h2 id="4-1-LaTeX数学公式"><a href="#4-1-LaTeX数学公式" class="headerlink" title="4.1 LaTeX数学公式"></a>4.1 LaTeX数学公式</h2><h2 id="4-2-流程图"><a href="#4-2-流程图" class="headerlink" title="4.2 流程图"></a>4.2 流程图</h2><h2 id="4-3-TODO列表"><a href="#4-3-TODO列表" class="headerlink" title="4.3 TODO列表"></a>4.3 TODO列表</h2><h2 id="4-4-绘制序列图"><a href="#4-4-绘制序列图" class="headerlink" title="4.4 绘制序列图"></a>4.4 绘制序列图</h2><h1 id="五、Markdown工具"><a href="#五、Markdown工具" class="headerlink" title="五、Markdown工具"></a><strong>五、Markdown工具</strong></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;写过博客的都知道Markdown语法的重要性，否则就会像我一样，在 hexo d 后出现warn警告。这篇</summary>
      
    
    
    
    <category term="使用教程" scheme="https://0w0suy.github.io/categories/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Markdown" scheme="https://0w0suy.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>github＋hexo懒人搭建博客完整教程</title>
    <link href="https://0w0suy.github.io/2021/07/07/github%EF%BC%8Bhexo%E6%87%92%E4%BA%BA%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    <id>https://0w0suy.github.io/2021/07/07/github%EF%BC%8Bhexo%E6%87%92%E4%BA%BA%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/</id>
    <published>2021-07-07T15:51:20.000Z</published>
    <updated>2021-07-21T03:39:15.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a><strong>一、准备</strong></h1><h2 id="1-1环境搭建"><a href="#1-1环境搭建" class="headerlink" title="1.1环境搭建"></a>1.1环境搭建</h2><p>搭建博客首先是准备环境的搭建，这就像我们体内的细胞依赖于内环境而存活，内环境为细胞的生活提供的必要的水环境以及其它物质交换的通道。我们搭建的环境也是如此。<br>先安装 Node.js 和 Git，因为Hexo 基于 Node.js。<br>附上下载的官网链接<br>Node.js：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a><br>Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。<br>安装完成后，Win+R 输入 cmd 并打开（或者左下角点查找），依次输入 node -v、npm -v 和 git –version（注意空格） 并回车，出校如下图表示成功。</p><h2 id="1-2注意事项"><a href="#1-2注意事项" class="headerlink" title="1.2注意事项"></a>1.2注意事项</h2><p>敲代码的时候，将输入法换成英文输入。<br>统一使用 Git Bash 进行操作。<br>注意空格。</p><hr><h1 id="二、连接-Github"><a href="#二、连接-Github" class="headerlink" title="二、连接 Github"></a><strong>二、连接 Github</strong></h1><p>使用邮箱注册 GitHub 账户，选择免费账户（Free），并完成邮件验证。<br>在桌面的页面，在空白处右键鼠标点【Git Bash Here】开始运行，设置用户名和邮箱。（注意：用户名是自己的github账户名，邮箱是绑定的邮箱）<br>‘’’<br>git config –global user.name “GitHub 用户名”<br>git config –global user.email “GitHub 邮箱”<br>‘’’<br>创建 SSH 密匙<br>输入 ssh-keygen -t rsa -C “GitHub 邮箱”，然后一路回车。<br>添加密匙：<br>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。<br>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。<br>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。<br>验证连接：<br>打开 Git Bash，输入 ssh -T <a href="mailto:&#x67;&#x69;&#116;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#x63;&#111;&#109;">&#x67;&#x69;&#116;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#x63;&#111;&#109;</a> 出现 “Are you sure……”，输入 yes 回车确认。<br>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p><hr><h1 id="三、创建-Github-Pages-仓库"><a href="#三、创建-Github-Pages-仓库" class="headerlink" title="三、创建 Github Pages 仓库"></a><strong>三、创建 Github Pages 仓库</strong></h1><p>GitHub 主页右上角加号 -&gt; New repository：<br>Repository name 中输入 用户名.github.io<br>勾选 “Initialize this repository with a README”<br>Description 选填<br>填好后点击 Create repository 创建。<br>创建后默认自动启用 HTTPS，博客地址为：https://用户名.github.io</p><hr><h1 id="四、本地安装-Hexo-博客程序"><a href="#四、本地安装-Hexo-博客程序" class="headerlink" title="四、本地安装 Hexo 博客程序"></a><strong>四、本地安装 Hexo 博客程序</strong></h1><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p><h2 id="4-1-安装-Hexo"><a href="#4-1-安装-Hexo" class="headerlink" title="4.1. 安装 Hexo"></a>4.1. 安装 Hexo</h2><p>使用 npm 一键安装 Hexo 博客程序：<br>npm install -g hexo-cli<br>稍等一会后，会出现如下图的代码</p><h2 id="4-2-Hexo-初始化和本地预览"><a href="#4-2-Hexo-初始化和本地预览" class="headerlink" title="4.2. Hexo 初始化和本地预览"></a>4.2. Hexo 初始化和本地预览</h2><p>初始化并安装所需组件：<br>hexo init      # 初始化<br>npm install    # 安装组件<br>完成后依次输入下面命令，启动本地服务器进行预览：<br>hexo g   # 生成页面<br>hexo s   # 启动预览<br>访问 <a href="http://localhost:4000，出现">http://localhost:4000，出现</a> Hexo 默认页面，本地博客安装成功！</p><hr><h1 id="五、部署-Hexo-到-GitHub-Pages"><a href="#五、部署-Hexo-到-GitHub-Pages" class="headerlink" title="五、部署 Hexo 到 GitHub Pages"></a><strong>五、部署 Hexo 到 GitHub Pages</strong></h1><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。<br>首先安装 hexo-deployer-git：<br>npm install hexo-deployer-git –save<br>然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：<br>‘’’<br>deploy:<br>  type: git<br>  repository: <a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;">&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;</a>:用户名/用户名.github.io.git<br>  branch: master<br>‘’’<br>完成后运行 hexo d 将网站上传部署到 GitHub Pages。<br>完成！这时访问我们的 GitHub 域名 https://用户名.github.io 就可以看到 Hexo 网站了。</p><hr><h1 id="六、绑定域名（可选）"><a href="#六、绑定域名（可选）" class="headerlink" title="六、绑定域名（可选）"></a><strong>六、绑定域名（可选）</strong></h1><h2 id="因为我用的是免费的github域名，就没有绑定域名。域名注册和解析这步过程略。"><a href="#因为我用的是免费的github域名，就没有绑定域名。域名注册和解析这步过程略。" class="headerlink" title="因为我用的是免费的github域名，就没有绑定域名。域名注册和解析这步过程略。"></a>因为我用的是免费的github域名，就没有绑定域名。域名注册和解析这步过程略。</h2><h1 id="七、开始使用"><a href="#七、开始使用" class="headerlink" title="七、开始使用"></a><strong>七、开始使用</strong></h1><p>详情见下一篇博客<br>7.1. 发布文章<br>7.2. 网站设置<br>7.3. 更换主题<br>7.4. 常用代码</p><hr><h1 id="八、常见问题"><a href="#八、常见问题" class="headerlink" title="八、常见问题"></a><strong>八、常见问题</strong></h1><h2 id="详情见下一篇博客"><a href="#详情见下一篇博客" class="headerlink" title="详情见下一篇博客"></a>详情见下一篇博客</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、准备&quot;&gt;&lt;a href=&quot;#一、准备&quot; class=&quot;headerlink&quot; title=&quot;一、准备&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、准备&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;1-1环境搭建&quot;&gt;&lt;a href=&quot;#1-1环境搭建&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="使用教程" scheme="https://0w0suy.github.io/categories/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo" scheme="https://0w0suy.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于blog常见报错及解决方法</title>
    <link href="https://0w0suy.github.io/2021/07/07/%E5%85%B3%E4%BA%8Eblog%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://0w0suy.github.io/2021/07/07/%E5%85%B3%E4%BA%8Eblog%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2021-07-07T05:36:34.000Z</published>
    <updated>2021-07-21T03:39:15.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在发blog的时候，经常会遇到一些重复性的报错问题，这些报错感觉都很眼熟，好像每天都会遇到（笑哭）。第一次看不懂报错，直接复制粘贴甩给百度翻译，但是就算翻译成中文人也还是懵逼的。比如这样<img src="/2021/07/07/%E5%85%B3%E4%BA%8Eblog%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/a.png" alt="a"></p><p>又或是这样<img src="/2021/07/07/%E5%85%B3%E4%BA%8Eblog%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/b.png" alt="b"></p><p>或许是那样<img src="/2021/07/07/%E5%85%B3%E4%BA%8Eblog%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/c.png" alt="c"></p><p>等等等等…</p><p>第二次第三次又遇到一样的情况，索性就整理出来吧。（持续更新）</p><h1 id="hexo-d报错解决："><a href="#hexo-d报错解决：" class="headerlink" title="hexo d报错解决："></a>hexo d报错解决：</h1><h4 id="OpenSSL-SSL-read-Connection-was-reset-errno-10054-错误解决"><a href="#OpenSSL-SSL-read-Connection-was-reset-errno-10054-错误解决" class="headerlink" title="OpenSSL SSL_read: Connection was reset, errno 10054 错误解决"></a>OpenSSL SSL_read: Connection was reset, errno 10054 错误解决</h4><p>首先，造成这个错误很有可能是网络不稳定，连接超时导致的，<br> 如果再次尝试后依然报错，可以执行下面的命令</p><p>在D:\blog\blog中打开Git-Bash命令页面，执行git命令脚本：修改设置，解除ssl验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure><p>此时，再执行hexo d即可解决</p><h1 id="hexo-s-报错解决"><a href="#hexo-s-报错解决" class="headerlink" title="hexo s 报错解决"></a>hexo s 报错解决</h1><h4 id="node-15260-Warning"><a href="#node-15260-Warning" class="headerlink" title="(node:15260) Warning"></a>(node:15260) Warning</h4><p><img src="/2021/07/07/%E5%85%B3%E4%BA%8Eblog%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/d.png" alt="d"></p><p>很简单 不用管它 （警告而已warning,我也不知道为什么还能运行qwq)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在发blog的时候，经常会遇到一些重复性的报错问题，这些报错感觉都很眼熟，好像每天都会遇到（笑哭）。第一次看不懂报错，直接复制粘贴甩给百度翻</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://0w0suy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="hexo" scheme="https://0w0suy.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://0w0suy.github.io/2021/07/06/Hello%20World/"/>
    <id>https://0w0suy.github.io/2021/07/06/Hello%20World/</id>
    <published>2021-07-06T06:09:11.479Z</published>
    <updated>2021-07-21T03:39:15.886Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
